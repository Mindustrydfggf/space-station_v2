Project Analysis Report 
======================= 
Generated on: 11/11/2024 14:12:31,77 
 
Import Analysis: 
--------------- 
 
FILE: C:\Users\Compiuter\Desktop\CRIPTO_SITO\space station\src\components\AbilityButtons.js 
Imports found: 
 
Usage of imports: 
------------------------ 
 
FILE: C:\Users\Compiuter\Desktop\CRIPTO_SITO\space station\src\components\GameStats.js 
Imports found: 
1:import { UIComponent } from '../ui/components/UIComponent.js';
2:import { RenderUtils } from '../utils/RenderUtils.js';
 
Usage of imports: 
1:import { UIComponent } from '../ui/components/UIComponent.js';
2:import { RenderUtils } from '../utils/RenderUtils.js';
4:export class GameStats extends UIComponent {
5:    constructor(ctx) {
10:    draw(gameState) {
11:        if (!gameState) {
16:        try {
25:        } catch (error) {
31:    drawStatsBackground() {
37:    drawBigStats(gameState) {
40:            `🎯 ${this.formatNumber(gameState.score)}`,
50:            `💰 ${this.formatNumber(gameState.credits)}`,
59:    drawTamarroText(text, x, y, mainColor, glowColor, scale = 1) {
61:        this.ctx.font = `bold ${adjustedSize}px Arial`;
85:    formatNumber(num) {
86:        try {
88:            if (num >= 1e9) return `${(num / 1e9).toFixed(1)}B`;
89:            if (num >= 1e6) return `${(num / 1e6).toFixed(1)}M`;
90:            if (num >= 1e3) return `${(num / 1e3).toFixed(1)}K`;
92:        } catch (error) {
1:import { UIComponent } from '../ui/components/UIComponent.js';
2:import { RenderUtils } from '../utils/RenderUtils.js';
4:export class GameStats extends UIComponent {
5:    constructor(ctx) {
10:    draw(gameState) {
11:        if (!gameState) {
16:        try {
25:        } catch (error) {
31:    drawStatsBackground() {
37:    drawBigStats(gameState) {
40:            `🎯 ${this.formatNumber(gameState.score)}`,
50:            `💰 ${this.formatNumber(gameState.credits)}`,
59:    drawTamarroText(text, x, y, mainColor, glowColor, scale = 1) {
61:        this.ctx.font = `bold ${adjustedSize}px Arial`;
85:    formatNumber(num) {
86:        try {
88:            if (num >= 1e9) return `${(num / 1e9).toFixed(1)}B`;
89:            if (num >= 1e6) return `${(num / 1e6).toFixed(1)}M`;
90:            if (num >= 1e3) return `${(num / 1e3).toFixed(1)}K`;
92:        } catch (error) {
------------------------ 
 
FILE: C:\Users\Compiuter\Desktop\CRIPTO_SITO\space station\src\components\StarBackground.js 
Imports found: 
1:import { UIComponent } from '../ui/components/UIComponent.js';
2:import { ColorUtils } from '../utils/ColorUtils.js';
20:        this.stars = Array.from({ length: STAR_COUNT }, () => ({
37:        this.clouds = Array.from({ length: CLOUD_COUNT }, () => ({
 
Usage of imports: 
1:import { UIComponent } from '../ui/components/UIComponent.js';
2:import { ColorUtils } from '../utils/ColorUtils.js';
4:export class StarBackground extends UIComponent {
5:    constructor(ctx, width, height) {
13:    initializeBackground() {
18:    initStars() {
20:        this.stars = Array.from({ length: STAR_COUNT }, () => ({
29:    initClouds() {
37:        this.clouds = Array.from({ length: CLOUD_COUNT }, () => ({
51:    project(x, y, z) {
53:        return {
60:    draw() {
84:    updateStars(deltaTime) {
85:        this.stars.forEach(star => {
87:            if (star.y > this.height) {
95:    updateClouds(deltaTime) {
96:        this.clouds.forEach(cloud => {
98:            if (cloud.y > this.height + cloud.height / 2) {
106:    drawStars() {
108:        this.stars.forEach(star => {
109:            this.ctx.fillStyle = `rgba(255, 255, 255, ${star.brightness})`;
120:    drawClouds(currentTime) {
123:        this.clouds.forEach(cloud => {
163:    resize(width, height) {
169:    setColorScheme(scheme) {
1:import { UIComponent } from '../ui/components/UIComponent.js';
2:import { ColorUtils } from '../utils/ColorUtils.js';
4:export class StarBackground extends UIComponent {
5:    constructor(ctx, width, height) {
13:    initializeBackground() {
18:    initStars() {
20:        this.stars = Array.from({ length: STAR_COUNT }, () => ({
29:    initClouds() {
37:        this.clouds = Array.from({ length: CLOUD_COUNT }, () => ({
51:    project(x, y, z) {
53:        return {
60:    draw() {
84:    updateStars(deltaTime) {
85:        this.stars.forEach(star => {
87:            if (star.y > this.height) {
95:    updateClouds(deltaTime) {
96:        this.clouds.forEach(cloud => {
98:            if (cloud.y > this.height + cloud.height / 2) {
106:    drawStars() {
108:        this.stars.forEach(star => {
109:            this.ctx.fillStyle = `rgba(255, 255, 255, ${star.brightness})`;
120:    drawClouds(currentTime) {
123:        this.clouds.forEach(cloud => {
163:    resize(width, height) {
169:    setColorScheme(scheme) {
------------------------ 
 
FILE: C:\Users\Compiuter\Desktop\CRIPTO_SITO\space station\src\components\UpgradeBars.js 
Imports found: 
 
Usage of imports: 
------------------------ 
 
FILE: C:\Users\Compiuter\Desktop\CRIPTO_SITO\space station\src\config\GameConfig.js 
Imports found: 
9:    COMBO_THRESHOLD: 10, // Hits required for combo bonus
 
Usage of imports: 
------------------------ 
 
FILE: C:\Users\Compiuter\Desktop\CRIPTO_SITO\space station\src\game\Game.js 
Imports found: 
1:import { GAME_CONFIG } from '../config/GameConfig.js';
2:import { GameState } from './GameState.js';
3:import { GameRenderer } from './GameRenderer.js';
4:import { SpaceStation } from '../objects/SpaceStation.js';
5:import { Projectile } from '../objects/Projectile.js';
6:import { Enemy} from '../objects/Enemy.js';
7:import { ShooterEnemy } from '../objects/ShooterEnemy.js';
8:import { SpeedyEnemy } from '../objects/SpeedyEnemy.js';
9:import { Explosion } from '../objects/Explosion.js';
10:import { GameUpgradeManager } from './GameUpgradeManager.js';
11:import { PowerUp } from '../objects/PowerUp.js';
12:import { BossEnemy } from '../objects/BossEnemy.js'; // Add this import
13:import { FloatingText } from '../objects/FloatingText.js';
14:import { Wave } from '../objects/Wave.js';
 
Usage of imports: 
1:import { GAME_CONFIG } from '../config/GameConfig.js';
2:import { GameState } from './GameState.js';
3:import { GameRenderer } from './GameRenderer.js';
4:import { SpaceStation } from '../objects/SpaceStation.js';
5:import { Projectile } from '../objects/Projectile.js';
6:import { Enemy} from '../objects/Enemy.js';
7:import { ShooterEnemy } from '../objects/ShooterEnemy.js';
8:import { SpeedyEnemy } from '../objects/SpeedyEnemy.js';
9:import { Explosion } from '../objects/Explosion.js';
10:import { GameUpgradeManager } from './GameUpgradeManager.js';
11:import { PowerUp } from '../objects/PowerUp.js';
12:import { BossEnemy } from '../objects/BossEnemy.js'; // Add this import
13:import { FloatingText } from '../objects/FloatingText.js';
14:import { Wave } from '../objects/Wave.js';
16:class Game {
17:    constructor() {
33:        window.keysPressed = {};
48:        this.entityManager = {
59:    initializeCanvas() {
64:        const updateCanvasSize = () => {
71:            if (this.station) {
84:    initializeSounds() {
85:        const sounds = {
96:        Object.values(sounds).forEach(sound => {
97:            if (sound) {
105:    handleSoundError(error) {
110:    setupEventListeners() {
116:        window.addEventListener('keydown', (e) => {
120:        window.addEventListener('keyup', (e) => {
125:    handleClick(event) {
142:    isPointInButton(x, y, buttonX, buttonY, buttonSize) {
147:    fireProjectiles(targetX, targetY) {
148:        for (let i = 0; i < this.station.turrets; i++) {
161:    handleMouseMove(event) {
168:    handleKeyDown(event) {
170:        if (event.code === 'Space') {
173:        if (event.code === 'KeyQ') {
178:        if (event.code === 'Space') {
180:            if (explosions) {
190:        if (event.key === 'Control') {
192:            if (explosions) {
203:        Object.entries(this.upgradeManager.upgrades).forEach(([name, upgrade]) => {
204:            if (event.key === upgrade.key) {
206:                if (this.state.credits >= currentCost) {
207:                    if (this.upgradeManager.applyUpgrade(name)) {
216:    startGameLoop() {
222:    gameLoop(timestamp) {
223:        if (this.paused) {
239:    update(deltaTime) {
256:        this.enemies.forEach(enemy => {
257:            if (enemy instanceof ShooterEnemy) {
260:            } else {
268:        this.enemyProjectiles = this.enemyProjectiles.filter(projectile => {
269:            if (projectile.collidesWith(this.station) && this.state.invulnerableTime <= 0) {
270:                if (this.station.shield > 0) {
272:                } else {
282:        if (this.state.powerupTimer >= this.state.powerupInterval) {
289:        this.state.activePowerups = this.state.activePowerups.filter(powerup => {
290:            if (powerup.collidesWith(this.station)) {
301:        this.enemies.forEach(enemy => {
306:        this.enemyProjectiles = this.enemyProjectiles.filter(projectile => {
315:        if (this.currentWave) {
316:            if (this.currentWave.isComplete) {
318:                if (this.waveTimer >= this.waveCooldown) {
321:            } else if (this.currentWave.canSpawnEnemy(Date.now())) {
323:                if (enemyData) {
325:                    console.log(`Spawned ${enemyData.type} enemy`); // Debug log
331:        if (this.currentWave && this.currentWave.isComplete && !this.currentWave.rewardGiven) {
337:    handleWaveCompletion() {
346:            `Wave ${this.waveNumber} Complete!`,
353:            `+${waveReward} 💰`,
358:        for (let i = 0; i < 8; i++) {
359:            setTimeout(() => {
372:    updateGameState(deltaTime) {
373:        if (this.state.invulnerableTime > 0) {
377:        if (this.state.gameTime % GAME_CONFIG.SHIELD_DECREASE_INTERVAL < deltaTime) {
382:    updateGameObjects() {
388:        this.enemies.forEach(enemy => {
389:            if (enemy instanceof ShooterEnemy) {
392:            } else {
400:    checkCollisions() {
405:    checkEnemyCollisions() {
406:        this.enemies = this.enemies.filter(enemy => {
407:            if (enemy.collidesWith(this.station)) {
408:                if (this.station.invincible) {
420:                if (damageTaken) {
427:                    if (stolenCredits > 0) {
432:                            `-${stolenCredits}💰`,
440:                        `-${waveDamage}❤️`,
455:    checkProjectileCollisions() {
456:        this.projectiles = this.projectiles.filter(projectile => {
460:            this.enemies = this.enemies.filter(enemy => {
461:                if (!hit && projectile.collidesWith(enemy)) {
474:    handleEnemyDeath(enemy, isCollision = false) {
484:            `+${creditReward}💰`,
501:    handleProjectileHit(enemy) {
512:        if (enemy.health <= 0) {
519:        if (this.comboCounter % GAME_CONFIG.COMBO_THRESHOLD === 0) {
525:    cleanupObjects() {
529:        if (this.station.health <= 0 && this.state.invulnerableTime <= 0) {
534:    isProjectileOnScreen(projectile) {
539:    handleGameOver() {
547:    resetGame() {
557:        if (this.sounds.background) {
563:    showGameOverPopup() {
565:        const gameStats = {
597:                        <td>${gameStats.score}</td>
601:                        <td>${gameStats.time}</td>
605:                        <td>${gameStats.enemiesKilled}</td>
609:                        <td>${gameStats.credits}</td>
613:                        <td>${gameStats.difficulty}x</td>
631:            &:hover {
636:        retryButton.addEventListener('click', () => {
646:    formatTime(milliseconds) {
650:        return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
653:    draw() {
663:        this.floatingTexts.forEach((text, index) => {
664:            if (!text || typeof text.draw !== 'function') {
666:            } else {
673:    playSound(soundName) {
674:        if (!this.state.muted && this.sounds[soundName]) {
680:    playBackgroundMusic() {
688:        const startMusic = () => {
696:    roundRect(x, y, width, height, radius) {
710:    spawnEnemy() {
741:    getRandomSpawnPoint() {
745:        switch(spawnSide) {
752:        return { x, y };
755:    spawnPowerUp() {
760:        do {
768:    handlePowerUpCollection(powerup) {
798:    updateComboSystem(deltaTime) {
799:        if (this.comboCounter > 0) {
801:            if (this.comboTimer > GAME_CONFIG.COMBO_RESET_TIME) {
808:    checkBossSpawn() {
809:        if (this.state.gameTime > GAME_CONFIG.BOSS_SPAWN_TIME && !this.bossSpawned) {
815:    spawnBoss() {
821:    startNextWave() {
830:            `Wave ${this.waveNumber}`,
835:    spawnWaveEnemy(enemyData) {
840:        switch(enemyData.type) {
864:    handleEnemyDeath(enemy, isCollision = false) {
877:            `+${creditReward}💰`,
891:        if (this.currentWave) {
896:    handleAbilityEffects(explosions) {
897:        explosions.forEach(exp => {
898:            setTimeout(() => {
902:                this.enemies.forEach(enemy => {
907:                    if (distance < 150) {
910:                        if (exp.pullForce) {
1:import { GAME_CONFIG } from '../config/GameConfig.js';
2:import { GameState } from './GameState.js';
3:import { GameRenderer } from './GameRenderer.js';
4:import { SpaceStation } from '../objects/SpaceStation.js';
5:import { Projectile } from '../objects/Projectile.js';
6:import { Enemy} from '../objects/Enemy.js';
7:import { ShooterEnemy } from '../objects/ShooterEnemy.js';
8:import { SpeedyEnemy } from '../objects/SpeedyEnemy.js';
9:import { Explosion } from '../objects/Explosion.js';
10:import { GameUpgradeManager } from './GameUpgradeManager.js';
11:import { PowerUp } from '../objects/PowerUp.js';
12:import { BossEnemy } from '../objects/BossEnemy.js'; // Add this import
13:import { FloatingText } from '../objects/FloatingText.js';
14:import { Wave } from '../objects/Wave.js';
16:class Game {
17:    constructor() {
33:        window.keysPressed = {};
48:        this.entityManager = {
59:    initializeCanvas() {
64:        const updateCanvasSize = () => {
71:            if (this.station) {
84:    initializeSounds() {
85:        const sounds = {
96:        Object.values(sounds).forEach(sound => {
97:            if (sound) {
105:    handleSoundError(error) {
110:    setupEventListeners() {
116:        window.addEventListener('keydown', (e) => {
120:        window.addEventListener('keyup', (e) => {
125:    handleClick(event) {
142:    isPointInButton(x, y, buttonX, buttonY, buttonSize) {
147:    fireProjectiles(targetX, targetY) {
148:        for (let i = 0; i < this.station.turrets; i++) {
161:    handleMouseMove(event) {
168:    handleKeyDown(event) {
170:        if (event.code === 'Space') {
173:        if (event.code === 'KeyQ') {
178:        if (event.code === 'Space') {
180:            if (explosions) {
190:        if (event.key === 'Control') {
192:            if (explosions) {
203:        Object.entries(this.upgradeManager.upgrades).forEach(([name, upgrade]) => {
204:            if (event.key === upgrade.key) {
206:                if (this.state.credits >= currentCost) {
207:                    if (this.upgradeManager.applyUpgrade(name)) {
216:    startGameLoop() {
222:    gameLoop(timestamp) {
223:        if (this.paused) {
239:    update(deltaTime) {
256:        this.enemies.forEach(enemy => {
257:            if (enemy instanceof ShooterEnemy) {
260:            } else {
268:        this.enemyProjectiles = this.enemyProjectiles.filter(projectile => {
269:            if (projectile.collidesWith(this.station) && this.state.invulnerableTime <= 0) {
270:                if (this.station.shield > 0) {
272:                } else {
282:        if (this.state.powerupTimer >= this.state.powerupInterval) {
289:        this.state.activePowerups = this.state.activePowerups.filter(powerup => {
290:            if (powerup.collidesWith(this.station)) {
301:        this.enemies.forEach(enemy => {
306:        this.enemyProjectiles = this.enemyProjectiles.filter(projectile => {
315:        if (this.currentWave) {
316:            if (this.currentWave.isComplete) {
318:                if (this.waveTimer >= this.waveCooldown) {
321:            } else if (this.currentWave.canSpawnEnemy(Date.now())) {
323:                if (enemyData) {
325:                    console.log(`Spawned ${enemyData.type} enemy`); // Debug log
331:        if (this.currentWave && this.currentWave.isComplete && !this.currentWave.rewardGiven) {
337:    handleWaveCompletion() {
346:            `Wave ${this.waveNumber} Complete!`,
353:            `+${waveReward} 💰`,
358:        for (let i = 0; i < 8; i++) {
359:            setTimeout(() => {
372:    updateGameState(deltaTime) {
373:        if (this.state.invulnerableTime > 0) {
377:        if (this.state.gameTime % GAME_CONFIG.SHIELD_DECREASE_INTERVAL < deltaTime) {
382:    updateGameObjects() {
388:        this.enemies.forEach(enemy => {
389:            if (enemy instanceof ShooterEnemy) {
392:            } else {
400:    checkCollisions() {
405:    checkEnemyCollisions() {
406:        this.enemies = this.enemies.filter(enemy => {
407:            if (enemy.collidesWith(this.station)) {
408:                if (this.station.invincible) {
420:                if (damageTaken) {
427:                    if (stolenCredits > 0) {
432:                            `-${stolenCredits}💰`,
440:                        `-${waveDamage}❤️`,
455:    checkProjectileCollisions() {
456:        this.projectiles = this.projectiles.filter(projectile => {
460:            this.enemies = this.enemies.filter(enemy => {
461:                if (!hit && projectile.collidesWith(enemy)) {
474:    handleEnemyDeath(enemy, isCollision = false) {
484:            `+${creditReward}💰`,
501:    handleProjectileHit(enemy) {
512:        if (enemy.health <= 0) {
519:        if (this.comboCounter % GAME_CONFIG.COMBO_THRESHOLD === 0) {
525:    cleanupObjects() {
529:        if (this.station.health <= 0 && this.state.invulnerableTime <= 0) {
534:    isProjectileOnScreen(projectile) {
539:    handleGameOver() {
547:    resetGame() {
557:        if (this.sounds.background) {
563:    showGameOverPopup() {
565:        const gameStats = {
597:                        <td>${gameStats.score}</td>
601:                        <td>${gameStats.time}</td>
605:                        <td>${gameStats.enemiesKilled}</td>
609:                        <td>${gameStats.credits}</td>
613:                        <td>${gameStats.difficulty}x</td>
631:            &:hover {
636:        retryButton.addEventListener('click', () => {
646:    formatTime(milliseconds) {
650:        return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
653:    draw() {
663:        this.floatingTexts.forEach((text, index) => {
664:            if (!text || typeof text.draw !== 'function') {
666:            } else {
673:    playSound(soundName) {
674:        if (!this.state.muted && this.sounds[soundName]) {
680:    playBackgroundMusic() {
688:        const startMusic = () => {
696:    roundRect(x, y, width, height, radius) {
710:    spawnEnemy() {
741:    getRandomSpawnPoint() {
745:        switch(spawnSide) {
752:        return { x, y };
755:    spawnPowerUp() {
760:        do {
768:    handlePowerUpCollection(powerup) {
798:    updateComboSystem(deltaTime) {
799:        if (this.comboCounter > 0) {
801:            if (this.comboTimer > GAME_CONFIG.COMBO_RESET_TIME) {
808:    checkBossSpawn() {
809:        if (this.state.gameTime > GAME_CONFIG.BOSS_SPAWN_TIME && !this.bossSpawned) {
815:    spawnBoss() {
821:    startNextWave() {
830:            `Wave ${this.waveNumber}`,
835:    spawnWaveEnemy(enemyData) {
840:        switch(enemyData.type) {
864:    handleEnemyDeath(enemy, isCollision = false) {
877:            `+${creditReward}💰`,
891:        if (this.currentWave) {
896:    handleAbilityEffects(explosions) {
897:        explosions.forEach(exp => {
898:            setTimeout(() => {
902:                this.enemies.forEach(enemy => {
907:                    if (distance < 150) {
910:                        if (exp.pullForce) {
1:import { GAME_CONFIG } from '../config/GameConfig.js';
2:import { GameState } from './GameState.js';
3:import { GameRenderer } from './GameRenderer.js';
4:import { SpaceStation } from '../objects/SpaceStation.js';
5:import { Projectile } from '../objects/Projectile.js';
6:import { Enemy} from '../objects/Enemy.js';
7:import { ShooterEnemy } from '../objects/ShooterEnemy.js';
8:import { SpeedyEnemy } from '../objects/SpeedyEnemy.js';
9:import { Explosion } from '../objects/Explosion.js';
10:import { GameUpgradeManager } from './GameUpgradeManager.js';
11:import { PowerUp } from '../objects/PowerUp.js';
12:import { BossEnemy } from '../objects/BossEnemy.js'; // Add this import
13:import { FloatingText } from '../objects/FloatingText.js';
14:import { Wave } from '../objects/Wave.js';
16:class Game {
17:    constructor() {
33:        window.keysPressed = {};
48:        this.entityManager = {
59:    initializeCanvas() {
64:        const updateCanvasSize = () => {
71:            if (this.station) {
84:    initializeSounds() {
85:        const sounds = {
96:        Object.values(sounds).forEach(sound => {
97:            if (sound) {
105:    handleSoundError(error) {
110:    setupEventListeners() {
116:        window.addEventListener('keydown', (e) => {
120:        window.addEventListener('keyup', (e) => {
125:    handleClick(event) {
142:    isPointInButton(x, y, buttonX, buttonY, buttonSize) {
147:    fireProjectiles(targetX, targetY) {
148:        for (let i = 0; i < this.station.turrets; i++) {
161:    handleMouseMove(event) {
168:    handleKeyDown(event) {
170:        if (event.code === 'Space') {
173:        if (event.code === 'KeyQ') {
178:        if (event.code === 'Space') {
180:            if (explosions) {
190:        if (event.key === 'Control') {
192:            if (explosions) {
203:        Object.entries(this.upgradeManager.upgrades).forEach(([name, upgrade]) => {
204:            if (event.key === upgrade.key) {
206:                if (this.state.credits >= currentCost) {
207:                    if (this.upgradeManager.applyUpgrade(name)) {
216:    startGameLoop() {
222:    gameLoop(timestamp) {
223:        if (this.paused) {
239:    update(deltaTime) {
256:        this.enemies.forEach(enemy => {
257:            if (enemy instanceof ShooterEnemy) {
260:            } else {
268:        this.enemyProjectiles = this.enemyProjectiles.filter(projectile => {
269:            if (projectile.collidesWith(this.station) && this.state.invulnerableTime <= 0) {
270:                if (this.station.shield > 0) {
272:                } else {
282:        if (this.state.powerupTimer >= this.state.powerupInterval) {
289:        this.state.activePowerups = this.state.activePowerups.filter(powerup => {
290:            if (powerup.collidesWith(this.station)) {
301:        this.enemies.forEach(enemy => {
306:        this.enemyProjectiles = this.enemyProjectiles.filter(projectile => {
315:        if (this.currentWave) {
316:            if (this.currentWave.isComplete) {
318:                if (this.waveTimer >= this.waveCooldown) {
321:            } else if (this.currentWave.canSpawnEnemy(Date.now())) {
323:                if (enemyData) {
325:                    console.log(`Spawned ${enemyData.type} enemy`); // Debug log
331:        if (this.currentWave && this.currentWave.isComplete && !this.currentWave.rewardGiven) {
337:    handleWaveCompletion() {
346:            `Wave ${this.waveNumber} Complete!`,
353:            `+${waveReward} 💰`,
358:        for (let i = 0; i < 8; i++) {
359:            setTimeout(() => {
372:    updateGameState(deltaTime) {
373:        if (this.state.invulnerableTime > 0) {
377:        if (this.state.gameTime % GAME_CONFIG.SHIELD_DECREASE_INTERVAL < deltaTime) {
382:    updateGameObjects() {
388:        this.enemies.forEach(enemy => {
389:            if (enemy instanceof ShooterEnemy) {
392:            } else {
400:    checkCollisions() {
405:    checkEnemyCollisions() {
406:        this.enemies = this.enemies.filter(enemy => {
407:            if (enemy.collidesWith(this.station)) {
408:                if (this.station.invincible) {
420:                if (damageTaken) {
427:                    if (stolenCredits > 0) {
432:                            `-${stolenCredits}💰`,
440:                        `-${waveDamage}❤️`,
455:    checkProjectileCollisions() {
456:        this.projectiles = this.projectiles.filter(projectile => {
460:            this.enemies = this.enemies.filter(enemy => {
461:                if (!hit && projectile.collidesWith(enemy)) {
474:    handleEnemyDeath(enemy, isCollision = false) {
484:            `+${creditReward}💰`,
501:    handleProjectileHit(enemy) {
512:        if (enemy.health <= 0) {
519:        if (this.comboCounter % GAME_CONFIG.COMBO_THRESHOLD === 0) {
525:    cleanupObjects() {
529:        if (this.station.health <= 0 && this.state.invulnerableTime <= 0) {
534:    isProjectileOnScreen(projectile) {
539:    handleGameOver() {
547:    resetGame() {
557:        if (this.sounds.background) {
563:    showGameOverPopup() {
565:        const gameStats = {
597:                        <td>${gameStats.score}</td>
601:                        <td>${gameStats.time}</td>
605:                        <td>${gameStats.enemiesKilled}</td>
609:                        <td>${gameStats.credits}</td>
613:                        <td>${gameStats.difficulty}x</td>
631:            &:hover {
636:        retryButton.addEventListener('click', () => {
646:    formatTime(milliseconds) {
650:        return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
653:    draw() {
663:        this.floatingTexts.forEach((text, index) => {
664:            if (!text || typeof text.draw !== 'function') {
666:            } else {
673:    playSound(soundName) {
674:        if (!this.state.muted && this.sounds[soundName]) {
680:    playBackgroundMusic() {
688:        const startMusic = () => {
696:    roundRect(x, y, width, height, radius) {
710:    spawnEnemy() {
741:    getRandomSpawnPoint() {
745:        switch(spawnSide) {
752:        return { x, y };
755:    spawnPowerUp() {
760:        do {
768:    handlePowerUpCollection(powerup) {
798:    updateComboSystem(deltaTime) {
799:        if (this.comboCounter > 0) {
801:            if (this.comboTimer > GAME_CONFIG.COMBO_RESET_TIME) {
808:    checkBossSpawn() {
809:        if (this.state.gameTime > GAME_CONFIG.BOSS_SPAWN_TIME && !this.bossSpawned) {
815:    spawnBoss() {
821:    startNextWave() {
830:            `Wave ${this.waveNumber}`,
835:    spawnWaveEnemy(enemyData) {
840:        switch(enemyData.type) {
864:    handleEnemyDeath(enemy, isCollision = false) {
877:            `+${creditReward}💰`,
891:        if (this.currentWave) {
896:    handleAbilityEffects(explosions) {
897:        explosions.forEach(exp => {
898:            setTimeout(() => {
902:                this.enemies.forEach(enemy => {
907:                    if (distance < 150) {
910:                        if (exp.pullForce) {
1:import { GAME_CONFIG } from '../config/GameConfig.js';
2:import { GameState } from './GameState.js';
3:import { GameRenderer } from './GameRenderer.js';
4:import { SpaceStation } from '../objects/SpaceStation.js';
5:import { Projectile } from '../objects/Projectile.js';
6:import { Enemy} from '../objects/Enemy.js';
7:import { ShooterEnemy } from '../objects/ShooterEnemy.js';
8:import { SpeedyEnemy } from '../objects/SpeedyEnemy.js';
9:import { Explosion } from '../objects/Explosion.js';
10:import { GameUpgradeManager } from './GameUpgradeManager.js';
11:import { PowerUp } from '../objects/PowerUp.js';
12:import { BossEnemy } from '../objects/BossEnemy.js'; // Add this import
13:import { FloatingText } from '../objects/FloatingText.js';
14:import { Wave } from '../objects/Wave.js';
16:class Game {
17:    constructor() {
33:        window.keysPressed = {};
48:        this.entityManager = {
59:    initializeCanvas() {
64:        const updateCanvasSize = () => {
71:            if (this.station) {
84:    initializeSounds() {
85:        const sounds = {
96:        Object.values(sounds).forEach(sound => {
97:            if (sound) {
105:    handleSoundError(error) {
110:    setupEventListeners() {
116:        window.addEventListener('keydown', (e) => {
120:        window.addEventListener('keyup', (e) => {
125:    handleClick(event) {
142:    isPointInButton(x, y, buttonX, buttonY, buttonSize) {
147:    fireProjectiles(targetX, targetY) {
148:        for (let i = 0; i < this.station.turrets; i++) {
161:    handleMouseMove(event) {
168:    handleKeyDown(event) {
170:        if (event.code === 'Space') {
173:        if (event.code === 'KeyQ') {
178:        if (event.code === 'Space') {
180:            if (explosions) {
190:        if (event.key === 'Control') {
192:            if (explosions) {
203:        Object.entries(this.upgradeManager.upgrades).forEach(([name, upgrade]) => {
204:            if (event.key === upgrade.key) {
206:                if (this.state.credits >= currentCost) {
207:                    if (this.upgradeManager.applyUpgrade(name)) {
216:    startGameLoop() {
222:    gameLoop(timestamp) {
223:        if (this.paused) {
239:    update(deltaTime) {
256:        this.enemies.forEach(enemy => {
257:            if (enemy instanceof ShooterEnemy) {
260:            } else {
268:        this.enemyProjectiles = this.enemyProjectiles.filter(projectile => {
269:            if (projectile.collidesWith(this.station) && this.state.invulnerableTime <= 0) {
270:                if (this.station.shield > 0) {
272:                } else {
282:        if (this.state.powerupTimer >= this.state.powerupInterval) {
289:        this.state.activePowerups = this.state.activePowerups.filter(powerup => {
290:            if (powerup.collidesWith(this.station)) {
301:        this.enemies.forEach(enemy => {
306:        this.enemyProjectiles = this.enemyProjectiles.filter(projectile => {
315:        if (this.currentWave) {
316:            if (this.currentWave.isComplete) {
318:                if (this.waveTimer >= this.waveCooldown) {
321:            } else if (this.currentWave.canSpawnEnemy(Date.now())) {
323:                if (enemyData) {
325:                    console.log(`Spawned ${enemyData.type} enemy`); // Debug log
331:        if (this.currentWave && this.currentWave.isComplete && !this.currentWave.rewardGiven) {
337:    handleWaveCompletion() {
346:            `Wave ${this.waveNumber} Complete!`,
353:            `+${waveReward} 💰`,
358:        for (let i = 0; i < 8; i++) {
359:            setTimeout(() => {
372:    updateGameState(deltaTime) {
373:        if (this.state.invulnerableTime > 0) {
377:        if (this.state.gameTime % GAME_CONFIG.SHIELD_DECREASE_INTERVAL < deltaTime) {
382:    updateGameObjects() {
388:        this.enemies.forEach(enemy => {
389:            if (enemy instanceof ShooterEnemy) {
392:            } else {
400:    checkCollisions() {
405:    checkEnemyCollisions() {
406:        this.enemies = this.enemies.filter(enemy => {
407:            if (enemy.collidesWith(this.station)) {
408:                if (this.station.invincible) {
420:                if (damageTaken) {
427:                    if (stolenCredits > 0) {
432:                            `-${stolenCredits}💰`,
440:                        `-${waveDamage}❤️`,
455:    checkProjectileCollisions() {
456:        this.projectiles = this.projectiles.filter(projectile => {
460:            this.enemies = this.enemies.filter(enemy => {
461:                if (!hit && projectile.collidesWith(enemy)) {
474:    handleEnemyDeath(enemy, isCollision = false) {
484:            `+${creditReward}💰`,
501:    handleProjectileHit(enemy) {
512:        if (enemy.health <= 0) {
519:        if (this.comboCounter % GAME_CONFIG.COMBO_THRESHOLD === 0) {
525:    cleanupObjects() {
529:        if (this.station.health <= 0 && this.state.invulnerableTime <= 0) {
534:    isProjectileOnScreen(projectile) {
539:    handleGameOver() {
547:    resetGame() {
557:        if (this.sounds.background) {
563:    showGameOverPopup() {
565:        const gameStats = {
597:                        <td>${gameStats.score}</td>
601:                        <td>${gameStats.time}</td>
605:                        <td>${gameStats.enemiesKilled}</td>
609:                        <td>${gameStats.credits}</td>
613:                        <td>${gameStats.difficulty}x</td>
631:            &:hover {
636:        retryButton.addEventListener('click', () => {
646:    formatTime(milliseconds) {
650:        return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
653:    draw() {
663:        this.floatingTexts.forEach((text, index) => {
664:            if (!text || typeof text.draw !== 'function') {
666:            } else {
673:    playSound(soundName) {
674:        if (!this.state.muted && this.sounds[soundName]) {
680:    playBackgroundMusic() {
688:        const startMusic = () => {
696:    roundRect(x, y, width, height, radius) {
710:    spawnEnemy() {
741:    getRandomSpawnPoint() {
745:        switch(spawnSide) {
752:        return { x, y };
755:    spawnPowerUp() {
760:        do {
768:    handlePowerUpCollection(powerup) {
798:    updateComboSystem(deltaTime) {
799:        if (this.comboCounter > 0) {
801:            if (this.comboTimer > GAME_CONFIG.COMBO_RESET_TIME) {
808:    checkBossSpawn() {
809:        if (this.state.gameTime > GAME_CONFIG.BOSS_SPAWN_TIME && !this.bossSpawned) {
815:    spawnBoss() {
821:    startNextWave() {
830:            `Wave ${this.waveNumber}`,
835:    spawnWaveEnemy(enemyData) {
840:        switch(enemyData.type) {
864:    handleEnemyDeath(enemy, isCollision = false) {
877:            `+${creditReward}💰`,
891:        if (this.currentWave) {
896:    handleAbilityEffects(explosions) {
897:        explosions.forEach(exp => {
898:            setTimeout(() => {
902:                this.enemies.forEach(enemy => {
907:                    if (distance < 150) {
910:                        if (exp.pullForce) {
1:import { GAME_CONFIG } from '../config/GameConfig.js';
2:import { GameState } from './GameState.js';
3:import { GameRenderer } from './GameRenderer.js';
4:import { SpaceStation } from '../objects/SpaceStation.js';
5:import { Projectile } from '../objects/Projectile.js';
6:import { Enemy} from '../objects/Enemy.js';
7:import { ShooterEnemy } from '../objects/ShooterEnemy.js';
8:import { SpeedyEnemy } from '../objects/SpeedyEnemy.js';
9:import { Explosion } from '../objects/Explosion.js';
10:import { GameUpgradeManager } from './GameUpgradeManager.js';
11:import { PowerUp } from '../objects/PowerUp.js';
12:import { BossEnemy } from '../objects/BossEnemy.js'; // Add this import
13:import { FloatingText } from '../objects/FloatingText.js';
14:import { Wave } from '../objects/Wave.js';
16:class Game {
17:    constructor() {
33:        window.keysPressed = {};
48:        this.entityManager = {
59:    initializeCanvas() {
64:        const updateCanvasSize = () => {
71:            if (this.station) {
84:    initializeSounds() {
85:        const sounds = {
96:        Object.values(sounds).forEach(sound => {
97:            if (sound) {
105:    handleSoundError(error) {
110:    setupEventListeners() {
116:        window.addEventListener('keydown', (e) => {
120:        window.addEventListener('keyup', (e) => {
125:    handleClick(event) {
142:    isPointInButton(x, y, buttonX, buttonY, buttonSize) {
147:    fireProjectiles(targetX, targetY) {
148:        for (let i = 0; i < this.station.turrets; i++) {
161:    handleMouseMove(event) {
168:    handleKeyDown(event) {
170:        if (event.code === 'Space') {
173:        if (event.code === 'KeyQ') {
178:        if (event.code === 'Space') {
180:            if (explosions) {
190:        if (event.key === 'Control') {
192:            if (explosions) {
203:        Object.entries(this.upgradeManager.upgrades).forEach(([name, upgrade]) => {
204:            if (event.key === upgrade.key) {
206:                if (this.state.credits >= currentCost) {
207:                    if (this.upgradeManager.applyUpgrade(name)) {
216:    startGameLoop() {
222:    gameLoop(timestamp) {
223:        if (this.paused) {
239:    update(deltaTime) {
256:        this.enemies.forEach(enemy => {
257:            if (enemy instanceof ShooterEnemy) {
260:            } else {
268:        this.enemyProjectiles = this.enemyProjectiles.filter(projectile => {
269:            if (projectile.collidesWith(this.station) && this.state.invulnerableTime <= 0) {
270:                if (this.station.shield > 0) {
272:                } else {
282:        if (this.state.powerupTimer >= this.state.powerupInterval) {
289:        this.state.activePowerups = this.state.activePowerups.filter(powerup => {
290:            if (powerup.collidesWith(this.station)) {
301:        this.enemies.forEach(enemy => {
306:        this.enemyProjectiles = this.enemyProjectiles.filter(projectile => {
315:        if (this.currentWave) {
316:            if (this.currentWave.isComplete) {
318:                if (this.waveTimer >= this.waveCooldown) {
321:            } else if (this.currentWave.canSpawnEnemy(Date.now())) {
323:                if (enemyData) {
325:                    console.log(`Spawned ${enemyData.type} enemy`); // Debug log
331:        if (this.currentWave && this.currentWave.isComplete && !this.currentWave.rewardGiven) {
337:    handleWaveCompletion() {
346:            `Wave ${this.waveNumber} Complete!`,
353:            `+${waveReward} 💰`,
358:        for (let i = 0; i < 8; i++) {
359:            setTimeout(() => {
372:    updateGameState(deltaTime) {
373:        if (this.state.invulnerableTime > 0) {
377:        if (this.state.gameTime % GAME_CONFIG.SHIELD_DECREASE_INTERVAL < deltaTime) {
382:    updateGameObjects() {
388:        this.enemies.forEach(enemy => {
389:            if (enemy instanceof ShooterEnemy) {
392:            } else {
400:    checkCollisions() {
405:    checkEnemyCollisions() {
406:        this.enemies = this.enemies.filter(enemy => {
407:            if (enemy.collidesWith(this.station)) {
408:                if (this.station.invincible) {
420:                if (damageTaken) {
427:                    if (stolenCredits > 0) {
432:                            `-${stolenCredits}💰`,
440:                        `-${waveDamage}❤️`,
455:    checkProjectileCollisions() {
456:        this.projectiles = this.projectiles.filter(projectile => {
460:            this.enemies = this.enemies.filter(enemy => {
461:                if (!hit && projectile.collidesWith(enemy)) {
474:    handleEnemyDeath(enemy, isCollision = false) {
484:            `+${creditReward}💰`,
501:    handleProjectileHit(enemy) {
512:        if (enemy.health <= 0) {
519:        if (this.comboCounter % GAME_CONFIG.COMBO_THRESHOLD === 0) {
525:    cleanupObjects() {
529:        if (this.station.health <= 0 && this.state.invulnerableTime <= 0) {
534:    isProjectileOnScreen(projectile) {
539:    handleGameOver() {
547:    resetGame() {
557:        if (this.sounds.background) {
563:    showGameOverPopup() {
565:        const gameStats = {
597:                        <td>${gameStats.score}</td>
601:                        <td>${gameStats.time}</td>
605:                        <td>${gameStats.enemiesKilled}</td>
609:                        <td>${gameStats.credits}</td>
613:                        <td>${gameStats.difficulty}x</td>
631:            &:hover {
636:        retryButton.addEventListener('click', () => {
646:    formatTime(milliseconds) {
650:        return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
653:    draw() {
663:        this.floatingTexts.forEach((text, index) => {
664:            if (!text || typeof text.draw !== 'function') {
666:            } else {
673:    playSound(soundName) {
674:        if (!this.state.muted && this.sounds[soundName]) {
680:    playBackgroundMusic() {
688:        const startMusic = () => {
696:    roundRect(x, y, width, height, radius) {
710:    spawnEnemy() {
741:    getRandomSpawnPoint() {
745:        switch(spawnSide) {
752:        return { x, y };
755:    spawnPowerUp() {
760:        do {
768:    handlePowerUpCollection(powerup) {
798:    updateComboSystem(deltaTime) {
799:        if (this.comboCounter > 0) {
801:            if (this.comboTimer > GAME_CONFIG.COMBO_RESET_TIME) {
808:    checkBossSpawn() {
809:        if (this.state.gameTime > GAME_CONFIG.BOSS_SPAWN_TIME && !this.bossSpawned) {
815:    spawnBoss() {
821:    startNextWave() {
830:            `Wave ${this.waveNumber}`,
835:    spawnWaveEnemy(enemyData) {
840:        switch(enemyData.type) {
864:    handleEnemyDeath(enemy, isCollision = false) {
877:            `+${creditReward}💰`,
891:        if (this.currentWave) {
896:    handleAbilityEffects(explosions) {
897:        explosions.forEach(exp => {
898:            setTimeout(() => {
902:                this.enemies.forEach(enemy => {
907:                    if (distance < 150) {
910:                        if (exp.pullForce) {
1:import { GAME_CONFIG } from '../config/GameConfig.js';
2:import { GameState } from './GameState.js';
3:import { GameRenderer } from './GameRenderer.js';
4:import { SpaceStation } from '../objects/SpaceStation.js';
5:import { Projectile } from '../objects/Projectile.js';
6:import { Enemy} from '../objects/Enemy.js';
7:import { ShooterEnemy } from '../objects/ShooterEnemy.js';
8:import { SpeedyEnemy } from '../objects/SpeedyEnemy.js';
9:import { Explosion } from '../objects/Explosion.js';
10:import { GameUpgradeManager } from './GameUpgradeManager.js';
11:import { PowerUp } from '../objects/PowerUp.js';
12:import { BossEnemy } from '../objects/BossEnemy.js'; // Add this import
13:import { FloatingText } from '../objects/FloatingText.js';
14:import { Wave } from '../objects/Wave.js';
16:class Game {
17:    constructor() {
33:        window.keysPressed = {};
48:        this.entityManager = {
59:    initializeCanvas() {
64:        const updateCanvasSize = () => {
71:            if (this.station) {
84:    initializeSounds() {
85:        const sounds = {
96:        Object.values(sounds).forEach(sound => {
97:            if (sound) {
105:    handleSoundError(error) {
110:    setupEventListeners() {
116:        window.addEventListener('keydown', (e) => {
120:        window.addEventListener('keyup', (e) => {
125:    handleClick(event) {
142:    isPointInButton(x, y, buttonX, buttonY, buttonSize) {
147:    fireProjectiles(targetX, targetY) {
148:        for (let i = 0; i < this.station.turrets; i++) {
161:    handleMouseMove(event) {
168:    handleKeyDown(event) {
170:        if (event.code === 'Space') {
173:        if (event.code === 'KeyQ') {
178:        if (event.code === 'Space') {
180:            if (explosions) {
190:        if (event.key === 'Control') {
192:            if (explosions) {
203:        Object.entries(this.upgradeManager.upgrades).forEach(([name, upgrade]) => {
204:            if (event.key === upgrade.key) {
206:                if (this.state.credits >= currentCost) {
207:                    if (this.upgradeManager.applyUpgrade(name)) {
216:    startGameLoop() {
222:    gameLoop(timestamp) {
223:        if (this.paused) {
239:    update(deltaTime) {
256:        this.enemies.forEach(enemy => {
257:            if (enemy instanceof ShooterEnemy) {
260:            } else {
268:        this.enemyProjectiles = this.enemyProjectiles.filter(projectile => {
269:            if (projectile.collidesWith(this.station) && this.state.invulnerableTime <= 0) {
270:                if (this.station.shield > 0) {
272:                } else {
282:        if (this.state.powerupTimer >= this.state.powerupInterval) {
289:        this.state.activePowerups = this.state.activePowerups.filter(powerup => {
290:            if (powerup.collidesWith(this.station)) {
301:        this.enemies.forEach(enemy => {
306:        this.enemyProjectiles = this.enemyProjectiles.filter(projectile => {
315:        if (this.currentWave) {
316:            if (this.currentWave.isComplete) {
318:                if (this.waveTimer >= this.waveCooldown) {
321:            } else if (this.currentWave.canSpawnEnemy(Date.now())) {
323:                if (enemyData) {
325:                    console.log(`Spawned ${enemyData.type} enemy`); // Debug log
331:        if (this.currentWave && this.currentWave.isComplete && !this.currentWave.rewardGiven) {
337:    handleWaveCompletion() {
346:            `Wave ${this.waveNumber} Complete!`,
353:            `+${waveReward} 💰`,
358:        for (let i = 0; i < 8; i++) {
359:            setTimeout(() => {
372:    updateGameState(deltaTime) {
373:        if (this.state.invulnerableTime > 0) {
377:        if (this.state.gameTime % GAME_CONFIG.SHIELD_DECREASE_INTERVAL < deltaTime) {
382:    updateGameObjects() {
388:        this.enemies.forEach(enemy => {
389:            if (enemy instanceof ShooterEnemy) {
392:            } else {
400:    checkCollisions() {
405:    checkEnemyCollisions() {
406:        this.enemies = this.enemies.filter(enemy => {
407:            if (enemy.collidesWith(this.station)) {
408:                if (this.station.invincible) {
420:                if (damageTaken) {
427:                    if (stolenCredits > 0) {
432:                            `-${stolenCredits}💰`,
440:                        `-${waveDamage}❤️`,
455:    checkProjectileCollisions() {
456:        this.projectiles = this.projectiles.filter(projectile => {
460:            this.enemies = this.enemies.filter(enemy => {
461:                if (!hit && projectile.collidesWith(enemy)) {
474:    handleEnemyDeath(enemy, isCollision = false) {
484:            `+${creditReward}💰`,
501:    handleProjectileHit(enemy) {
512:        if (enemy.health <= 0) {
519:        if (this.comboCounter % GAME_CONFIG.COMBO_THRESHOLD === 0) {
525:    cleanupObjects() {
529:        if (this.station.health <= 0 && this.state.invulnerableTime <= 0) {
534:    isProjectileOnScreen(projectile) {
539:    handleGameOver() {
547:    resetGame() {
557:        if (this.sounds.background) {
563:    showGameOverPopup() {
565:        const gameStats = {
597:                        <td>${gameStats.score}</td>
601:                        <td>${gameStats.time}</td>
605:                        <td>${gameStats.enemiesKilled}</td>
609:                        <td>${gameStats.credits}</td>
613:                        <td>${gameStats.difficulty}x</td>
631:            &:hover {
636:        retryButton.addEventListener('click', () => {
646:    formatTime(milliseconds) {
650:        return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
653:    draw() {
663:        this.floatingTexts.forEach((text, index) => {
664:            if (!text || typeof text.draw !== 'function') {
666:            } else {
673:    playSound(soundName) {
674:        if (!this.state.muted && this.sounds[soundName]) {
680:    playBackgroundMusic() {
688:        const startMusic = () => {
696:    roundRect(x, y, width, height, radius) {
710:    spawnEnemy() {
741:    getRandomSpawnPoint() {
745:        switch(spawnSide) {
752:        return { x, y };
755:    spawnPowerUp() {
760:        do {
768:    handlePowerUpCollection(powerup) {
798:    updateComboSystem(deltaTime) {
799:        if (this.comboCounter > 0) {
801:            if (this.comboTimer > GAME_CONFIG.COMBO_RESET_TIME) {
808:    checkBossSpawn() {
809:        if (this.state.gameTime > GAME_CONFIG.BOSS_SPAWN_TIME && !this.bossSpawned) {
815:    spawnBoss() {
821:    startNextWave() {
830:            `Wave ${this.waveNumber}`,
835:    spawnWaveEnemy(enemyData) {
840:        switch(enemyData.type) {
864:    handleEnemyDeath(enemy, isCollision = false) {
877:            `+${creditReward}💰`,
891:        if (this.currentWave) {
896:    handleAbilityEffects(explosions) {
897:        explosions.forEach(exp => {
898:            setTimeout(() => {
902:                this.enemies.forEach(enemy => {
907:                    if (distance < 150) {
910:                        if (exp.pullForce) {
1:import { GAME_CONFIG } from '../config/GameConfig.js';
2:import { GameState } from './GameState.js';
3:import { GameRenderer } from './GameRenderer.js';
4:import { SpaceStation } from '../objects/SpaceStation.js';
5:import { Projectile } from '../objects/Projectile.js';
6:import { Enemy} from '../objects/Enemy.js';
7:import { ShooterEnemy } from '../objects/ShooterEnemy.js';
8:import { SpeedyEnemy } from '../objects/SpeedyEnemy.js';
9:import { Explosion } from '../objects/Explosion.js';
10:import { GameUpgradeManager } from './GameUpgradeManager.js';
11:import { PowerUp } from '../objects/PowerUp.js';
12:import { BossEnemy } from '../objects/BossEnemy.js'; // Add this import
13:import { FloatingText } from '../objects/FloatingText.js';
14:import { Wave } from '../objects/Wave.js';
16:class Game {
17:    constructor() {
33:        window.keysPressed = {};
48:        this.entityManager = {
59:    initializeCanvas() {
64:        const updateCanvasSize = () => {
71:            if (this.station) {
84:    initializeSounds() {
85:        const sounds = {
96:        Object.values(sounds).forEach(sound => {
97:            if (sound) {
105:    handleSoundError(error) {
110:    setupEventListeners() {
116:        window.addEventListener('keydown', (e) => {
120:        window.addEventListener('keyup', (e) => {
125:    handleClick(event) {
142:    isPointInButton(x, y, buttonX, buttonY, buttonSize) {
147:    fireProjectiles(targetX, targetY) {
148:        for (let i = 0; i < this.station.turrets; i++) {
161:    handleMouseMove(event) {
168:    handleKeyDown(event) {
170:        if (event.code === 'Space') {
173:        if (event.code === 'KeyQ') {
178:        if (event.code === 'Space') {
180:            if (explosions) {
190:        if (event.key === 'Control') {
192:            if (explosions) {
203:        Object.entries(this.upgradeManager.upgrades).forEach(([name, upgrade]) => {
204:            if (event.key === upgrade.key) {
206:                if (this.state.credits >= currentCost) {
207:                    if (this.upgradeManager.applyUpgrade(name)) {
216:    startGameLoop() {
222:    gameLoop(timestamp) {
223:        if (this.paused) {
239:    update(deltaTime) {
256:        this.enemies.forEach(enemy => {
257:            if (enemy instanceof ShooterEnemy) {
260:            } else {
268:        this.enemyProjectiles = this.enemyProjectiles.filter(projectile => {
269:            if (projectile.collidesWith(this.station) && this.state.invulnerableTime <= 0) {
270:                if (this.station.shield > 0) {
272:                } else {
282:        if (this.state.powerupTimer >= this.state.powerupInterval) {
289:        this.state.activePowerups = this.state.activePowerups.filter(powerup => {
290:            if (powerup.collidesWith(this.station)) {
301:        this.enemies.forEach(enemy => {
306:        this.enemyProjectiles = this.enemyProjectiles.filter(projectile => {
315:        if (this.currentWave) {
316:            if (this.currentWave.isComplete) {
318:                if (this.waveTimer >= this.waveCooldown) {
321:            } else if (this.currentWave.canSpawnEnemy(Date.now())) {
323:                if (enemyData) {
325:                    console.log(`Spawned ${enemyData.type} enemy`); // Debug log
331:        if (this.currentWave && this.currentWave.isComplete && !this.currentWave.rewardGiven) {
337:    handleWaveCompletion() {
346:            `Wave ${this.waveNumber} Complete!`,
353:            `+${waveReward} 💰`,
358:        for (let i = 0; i < 8; i++) {
359:            setTimeout(() => {
372:    updateGameState(deltaTime) {
373:        if (this.state.invulnerableTime > 0) {
377:        if (this.state.gameTime % GAME_CONFIG.SHIELD_DECREASE_INTERVAL < deltaTime) {
382:    updateGameObjects() {
388:        this.enemies.forEach(enemy => {
389:            if (enemy instanceof ShooterEnemy) {
392:            } else {
400:    checkCollisions() {
405:    checkEnemyCollisions() {
406:        this.enemies = this.enemies.filter(enemy => {
407:            if (enemy.collidesWith(this.station)) {
408:                if (this.station.invincible) {
420:                if (damageTaken) {
427:                    if (stolenCredits > 0) {
432:                            `-${stolenCredits}💰`,
440:                        `-${waveDamage}❤️`,
455:    checkProjectileCollisions() {
456:        this.projectiles = this.projectiles.filter(projectile => {
460:            this.enemies = this.enemies.filter(enemy => {
461:                if (!hit && projectile.collidesWith(enemy)) {
474:    handleEnemyDeath(enemy, isCollision = false) {
484:            `+${creditReward}💰`,
501:    handleProjectileHit(enemy) {
512:        if (enemy.health <= 0) {
519:        if (this.comboCounter % GAME_CONFIG.COMBO_THRESHOLD === 0) {
525:    cleanupObjects() {
529:        if (this.station.health <= 0 && this.state.invulnerableTime <= 0) {
534:    isProjectileOnScreen(projectile) {
539:    handleGameOver() {
547:    resetGame() {
557:        if (this.sounds.background) {
563:    showGameOverPopup() {
565:        const gameStats = {
597:                        <td>${gameStats.score}</td>
601:                        <td>${gameStats.time}</td>
605:                        <td>${gameStats.enemiesKilled}</td>
609:                        <td>${gameStats.credits}</td>
613:                        <td>${gameStats.difficulty}x</td>
631:            &:hover {
636:        retryButton.addEventListener('click', () => {
646:    formatTime(milliseconds) {
650:        return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
653:    draw() {
663:        this.floatingTexts.forEach((text, index) => {
664:            if (!text || typeof text.draw !== 'function') {
666:            } else {
673:    playSound(soundName) {
674:        if (!this.state.muted && this.sounds[soundName]) {
680:    playBackgroundMusic() {
688:        const startMusic = () => {
696:    roundRect(x, y, width, height, radius) {
710:    spawnEnemy() {
741:    getRandomSpawnPoint() {
745:        switch(spawnSide) {
752:        return { x, y };
755:    spawnPowerUp() {
760:        do {
768:    handlePowerUpCollection(powerup) {
798:    updateComboSystem(deltaTime) {
799:        if (this.comboCounter > 0) {
801:            if (this.comboTimer > GAME_CONFIG.COMBO_RESET_TIME) {
808:    checkBossSpawn() {
809:        if (this.state.gameTime > GAME_CONFIG.BOSS_SPAWN_TIME && !this.bossSpawned) {
815:    spawnBoss() {
821:    startNextWave() {
830:            `Wave ${this.waveNumber}`,
835:    spawnWaveEnemy(enemyData) {
840:        switch(enemyData.type) {
864:    handleEnemyDeath(enemy, isCollision = false) {
877:            `+${creditReward}💰`,
891:        if (this.currentWave) {
896:    handleAbilityEffects(explosions) {
897:        explosions.forEach(exp => {
898:            setTimeout(() => {
902:                this.enemies.forEach(enemy => {
907:                    if (distance < 150) {
910:                        if (exp.pullForce) {
1:import { GAME_CONFIG } from '../config/GameConfig.js';
2:import { GameState } from './GameState.js';
3:import { GameRenderer } from './GameRenderer.js';
4:import { SpaceStation } from '../objects/SpaceStation.js';
5:import { Projectile } from '../objects/Projectile.js';
6:import { Enemy} from '../objects/Enemy.js';
7:import { ShooterEnemy } from '../objects/ShooterEnemy.js';
8:import { SpeedyEnemy } from '../objects/SpeedyEnemy.js';
9:import { Explosion } from '../objects/Explosion.js';
10:import { GameUpgradeManager } from './GameUpgradeManager.js';
11:import { PowerUp } from '../objects/PowerUp.js';
12:import { BossEnemy } from '../objects/BossEnemy.js'; // Add this import
13:import { FloatingText } from '../objects/FloatingText.js';
14:import { Wave } from '../objects/Wave.js';
16:class Game {
17:    constructor() {
33:        window.keysPressed = {};
48:        this.entityManager = {
59:    initializeCanvas() {
64:        const updateCanvasSize = () => {
71:            if (this.station) {
84:    initializeSounds() {
85:        const sounds = {
96:        Object.values(sounds).forEach(sound => {
97:            if (sound) {
105:    handleSoundError(error) {
110:    setupEventListeners() {
116:        window.addEventListener('keydown', (e) => {
120:        window.addEventListener('keyup', (e) => {
125:    handleClick(event) {
142:    isPointInButton(x, y, buttonX, buttonY, buttonSize) {
147:    fireProjectiles(targetX, targetY) {
148:        for (let i = 0; i < this.station.turrets; i++) {
161:    handleMouseMove(event) {
168:    handleKeyDown(event) {
170:        if (event.code === 'Space') {
173:        if (event.code === 'KeyQ') {
178:        if (event.code === 'Space') {
180:            if (explosions) {
190:        if (event.key === 'Control') {
192:            if (explosions) {
203:        Object.entries(this.upgradeManager.upgrades).forEach(([name, upgrade]) => {
204:            if (event.key === upgrade.key) {
206:                if (this.state.credits >= currentCost) {
207:                    if (this.upgradeManager.applyUpgrade(name)) {
216:    startGameLoop() {
222:    gameLoop(timestamp) {
223:        if (this.paused) {
239:    update(deltaTime) {
256:        this.enemies.forEach(enemy => {
257:            if (enemy instanceof ShooterEnemy) {
260:            } else {
268:        this.enemyProjectiles = this.enemyProjectiles.filter(projectile => {
269:            if (projectile.collidesWith(this.station) && this.state.invulnerableTime <= 0) {
270:                if (this.station.shield > 0) {
272:                } else {
282:        if (this.state.powerupTimer >= this.state.powerupInterval) {
289:        this.state.activePowerups = this.state.activePowerups.filter(powerup => {
290:            if (powerup.collidesWith(this.station)) {
301:        this.enemies.forEach(enemy => {
306:        this.enemyProjectiles = this.enemyProjectiles.filter(projectile => {
315:        if (this.currentWave) {
316:            if (this.currentWave.isComplete) {
318:                if (this.waveTimer >= this.waveCooldown) {
321:            } else if (this.currentWave.canSpawnEnemy(Date.now())) {
323:                if (enemyData) {
325:                    console.log(`Spawned ${enemyData.type} enemy`); // Debug log
331:        if (this.currentWave && this.currentWave.isComplete && !this.currentWave.rewardGiven) {
337:    handleWaveCompletion() {
346:            `Wave ${this.waveNumber} Complete!`,
353:            `+${waveReward} 💰`,
358:        for (let i = 0; i < 8; i++) {
359:            setTimeout(() => {
372:    updateGameState(deltaTime) {
373:        if (this.state.invulnerableTime > 0) {
377:        if (this.state.gameTime % GAME_CONFIG.SHIELD_DECREASE_INTERVAL < deltaTime) {
382:    updateGameObjects() {
388:        this.enemies.forEach(enemy => {
389:            if (enemy instanceof ShooterEnemy) {
392:            } else {
400:    checkCollisions() {
405:    checkEnemyCollisions() {
406:        this.enemies = this.enemies.filter(enemy => {
407:            if (enemy.collidesWith(this.station)) {
408:                if (this.station.invincible) {
420:                if (damageTaken) {
427:                    if (stolenCredits > 0) {
432:                            `-${stolenCredits}💰`,
440:                        `-${waveDamage}❤️`,
455:    checkProjectileCollisions() {
456:        this.projectiles = this.projectiles.filter(projectile => {
460:            this.enemies = this.enemies.filter(enemy => {
461:                if (!hit && projectile.collidesWith(enemy)) {
474:    handleEnemyDeath(enemy, isCollision = false) {
484:            `+${creditReward}💰`,
501:    handleProjectileHit(enemy) {
512:        if (enemy.health <= 0) {
519:        if (this.comboCounter % GAME_CONFIG.COMBO_THRESHOLD === 0) {
525:    cleanupObjects() {
529:        if (this.station.health <= 0 && this.state.invulnerableTime <= 0) {
534:    isProjectileOnScreen(projectile) {
539:    handleGameOver() {
547:    resetGame() {
557:        if (this.sounds.background) {
563:    showGameOverPopup() {
565:        const gameStats = {
597:                        <td>${gameStats.score}</td>
601:                        <td>${gameStats.time}</td>
605:                        <td>${gameStats.enemiesKilled}</td>
609:                        <td>${gameStats.credits}</td>
613:                        <td>${gameStats.difficulty}x</td>
631:            &:hover {
636:        retryButton.addEventListener('click', () => {
646:    formatTime(milliseconds) {
650:        return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
653:    draw() {
663:        this.floatingTexts.forEach((text, index) => {
664:            if (!text || typeof text.draw !== 'function') {
666:            } else {
673:    playSound(soundName) {
674:        if (!this.state.muted && this.sounds[soundName]) {
680:    playBackgroundMusic() {
688:        const startMusic = () => {
696:    roundRect(x, y, width, height, radius) {
710:    spawnEnemy() {
741:    getRandomSpawnPoint() {
745:        switch(spawnSide) {
752:        return { x, y };
755:    spawnPowerUp() {
760:        do {
768:    handlePowerUpCollection(powerup) {
798:    updateComboSystem(deltaTime) {
799:        if (this.comboCounter > 0) {
801:            if (this.comboTimer > GAME_CONFIG.COMBO_RESET_TIME) {
808:    checkBossSpawn() {
809:        if (this.state.gameTime > GAME_CONFIG.BOSS_SPAWN_TIME && !this.bossSpawned) {
815:    spawnBoss() {
821:    startNextWave() {
830:            `Wave ${this.waveNumber}`,
835:    spawnWaveEnemy(enemyData) {
840:        switch(enemyData.type) {
864:    handleEnemyDeath(enemy, isCollision = false) {
877:            `+${creditReward}💰`,
891:        if (this.currentWave) {
896:    handleAbilityEffects(explosions) {
897:        explosions.forEach(exp => {
898:            setTimeout(() => {
902:                this.enemies.forEach(enemy => {
907:                    if (distance < 150) {
910:                        if (exp.pullForce) {
1:import { GAME_CONFIG } from '../config/GameConfig.js';
2:import { GameState } from './GameState.js';
3:import { GameRenderer } from './GameRenderer.js';
4:import { SpaceStation } from '../objects/SpaceStation.js';
5:import { Projectile } from '../objects/Projectile.js';
6:import { Enemy} from '../objects/Enemy.js';
7:import { ShooterEnemy } from '../objects/ShooterEnemy.js';
8:import { SpeedyEnemy } from '../objects/SpeedyEnemy.js';
9:import { Explosion } from '../objects/Explosion.js';
10:import { GameUpgradeManager } from './GameUpgradeManager.js';
11:import { PowerUp } from '../objects/PowerUp.js';
12:import { BossEnemy } from '../objects/BossEnemy.js'; // Add this import
13:import { FloatingText } from '../objects/FloatingText.js';
14:import { Wave } from '../objects/Wave.js';
16:class Game {
17:    constructor() {
33:        window.keysPressed = {};
48:        this.entityManager = {
59:    initializeCanvas() {
64:        const updateCanvasSize = () => {
71:            if (this.station) {
84:    initializeSounds() {
85:        const sounds = {
96:        Object.values(sounds).forEach(sound => {
97:            if (sound) {
105:    handleSoundError(error) {
110:    setupEventListeners() {
116:        window.addEventListener('keydown', (e) => {
120:        window.addEventListener('keyup', (e) => {
125:    handleClick(event) {
142:    isPointInButton(x, y, buttonX, buttonY, buttonSize) {
147:    fireProjectiles(targetX, targetY) {
148:        for (let i = 0; i < this.station.turrets; i++) {
161:    handleMouseMove(event) {
168:    handleKeyDown(event) {
170:        if (event.code === 'Space') {
173:        if (event.code === 'KeyQ') {
178:        if (event.code === 'Space') {
180:            if (explosions) {
190:        if (event.key === 'Control') {
192:            if (explosions) {
203:        Object.entries(this.upgradeManager.upgrades).forEach(([name, upgrade]) => {
204:            if (event.key === upgrade.key) {
206:                if (this.state.credits >= currentCost) {
207:                    if (this.upgradeManager.applyUpgrade(name)) {
216:    startGameLoop() {
222:    gameLoop(timestamp) {
223:        if (this.paused) {
239:    update(deltaTime) {
256:        this.enemies.forEach(enemy => {
257:            if (enemy instanceof ShooterEnemy) {
260:            } else {
268:        this.enemyProjectiles = this.enemyProjectiles.filter(projectile => {
269:            if (projectile.collidesWith(this.station) && this.state.invulnerableTime <= 0) {
270:                if (this.station.shield > 0) {
272:                } else {
282:        if (this.state.powerupTimer >= this.state.powerupInterval) {
289:        this.state.activePowerups = this.state.activePowerups.filter(powerup => {
290:            if (powerup.collidesWith(this.station)) {
301:        this.enemies.forEach(enemy => {
306:        this.enemyProjectiles = this.enemyProjectiles.filter(projectile => {
315:        if (this.currentWave) {
316:            if (this.currentWave.isComplete) {
318:                if (this.waveTimer >= this.waveCooldown) {
321:            } else if (this.currentWave.canSpawnEnemy(Date.now())) {
323:                if (enemyData) {
325:                    console.log(`Spawned ${enemyData.type} enemy`); // Debug log
331:        if (this.currentWave && this.currentWave.isComplete && !this.currentWave.rewardGiven) {
337:    handleWaveCompletion() {
346:            `Wave ${this.waveNumber} Complete!`,
353:            `+${waveReward} 💰`,
358:        for (let i = 0; i < 8; i++) {
359:            setTimeout(() => {
372:    updateGameState(deltaTime) {
373:        if (this.state.invulnerableTime > 0) {
377:        if (this.state.gameTime % GAME_CONFIG.SHIELD_DECREASE_INTERVAL < deltaTime) {
382:    updateGameObjects() {
388:        this.enemies.forEach(enemy => {
389:            if (enemy instanceof ShooterEnemy) {
392:            } else {
400:    checkCollisions() {
405:    checkEnemyCollisions() {
406:        this.enemies = this.enemies.filter(enemy => {
407:            if (enemy.collidesWith(this.station)) {
408:                if (this.station.invincible) {
420:                if (damageTaken) {
427:                    if (stolenCredits > 0) {
432:                            `-${stolenCredits}💰`,
440:                        `-${waveDamage}❤️`,
455:    checkProjectileCollisions() {
456:        this.projectiles = this.projectiles.filter(projectile => {
460:            this.enemies = this.enemies.filter(enemy => {
461:                if (!hit && projectile.collidesWith(enemy)) {
474:    handleEnemyDeath(enemy, isCollision = false) {
484:            `+${creditReward}💰`,
501:    handleProjectileHit(enemy) {
512:        if (enemy.health <= 0) {
519:        if (this.comboCounter % GAME_CONFIG.COMBO_THRESHOLD === 0) {
525:    cleanupObjects() {
529:        if (this.station.health <= 0 && this.state.invulnerableTime <= 0) {
534:    isProjectileOnScreen(projectile) {
539:    handleGameOver() {
547:    resetGame() {
557:        if (this.sounds.background) {
563:    showGameOverPopup() {
565:        const gameStats = {
597:                        <td>${gameStats.score}</td>
601:                        <td>${gameStats.time}</td>
605:                        <td>${gameStats.enemiesKilled}</td>
609:                        <td>${gameStats.credits}</td>
613:                        <td>${gameStats.difficulty}x</td>
631:            &:hover {
636:        retryButton.addEventListener('click', () => {
646:    formatTime(milliseconds) {
650:        return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
653:    draw() {
663:        this.floatingTexts.forEach((text, index) => {
664:            if (!text || typeof text.draw !== 'function') {
666:            } else {
673:    playSound(soundName) {
674:        if (!this.state.muted && this.sounds[soundName]) {
680:    playBackgroundMusic() {
688:        const startMusic = () => {
696:    roundRect(x, y, width, height, radius) {
710:    spawnEnemy() {
741:    getRandomSpawnPoint() {
745:        switch(spawnSide) {
752:        return { x, y };
755:    spawnPowerUp() {
760:        do {
768:    handlePowerUpCollection(powerup) {
798:    updateComboSystem(deltaTime) {
799:        if (this.comboCounter > 0) {
801:            if (this.comboTimer > GAME_CONFIG.COMBO_RESET_TIME) {
808:    checkBossSpawn() {
809:        if (this.state.gameTime > GAME_CONFIG.BOSS_SPAWN_TIME && !this.bossSpawned) {
815:    spawnBoss() {
821:    startNextWave() {
830:            `Wave ${this.waveNumber}`,
835:    spawnWaveEnemy(enemyData) {
840:        switch(enemyData.type) {
864:    handleEnemyDeath(enemy, isCollision = false) {
877:            `+${creditReward}💰`,
891:        if (this.currentWave) {
896:    handleAbilityEffects(explosions) {
897:        explosions.forEach(exp => {
898:            setTimeout(() => {
902:                this.enemies.forEach(enemy => {
907:                    if (distance < 150) {
910:                        if (exp.pullForce) {
1:import { GAME_CONFIG } from '../config/GameConfig.js';
2:import { GameState } from './GameState.js';
3:import { GameRenderer } from './GameRenderer.js';
4:import { SpaceStation } from '../objects/SpaceStation.js';
5:import { Projectile } from '../objects/Projectile.js';
6:import { Enemy} from '../objects/Enemy.js';
7:import { ShooterEnemy } from '../objects/ShooterEnemy.js';
8:import { SpeedyEnemy } from '../objects/SpeedyEnemy.js';
9:import { Explosion } from '../objects/Explosion.js';
10:import { GameUpgradeManager } from './GameUpgradeManager.js';
11:import { PowerUp } from '../objects/PowerUp.js';
12:import { BossEnemy } from '../objects/BossEnemy.js'; // Add this import
13:import { FloatingText } from '../objects/FloatingText.js';
14:import { Wave } from '../objects/Wave.js';
16:class Game {
17:    constructor() {
33:        window.keysPressed = {};
48:        this.entityManager = {
59:    initializeCanvas() {
64:        const updateCanvasSize = () => {
71:            if (this.station) {
84:    initializeSounds() {
85:        const sounds = {
96:        Object.values(sounds).forEach(sound => {
97:            if (sound) {
105:    handleSoundError(error) {
110:    setupEventListeners() {
116:        window.addEventListener('keydown', (e) => {
120:        window.addEventListener('keyup', (e) => {
125:    handleClick(event) {
142:    isPointInButton(x, y, buttonX, buttonY, buttonSize) {
147:    fireProjectiles(targetX, targetY) {
148:        for (let i = 0; i < this.station.turrets; i++) {
161:    handleMouseMove(event) {
168:    handleKeyDown(event) {
170:        if (event.code === 'Space') {
173:        if (event.code === 'KeyQ') {
178:        if (event.code === 'Space') {
180:            if (explosions) {
190:        if (event.key === 'Control') {
192:            if (explosions) {
203:        Object.entries(this.upgradeManager.upgrades).forEach(([name, upgrade]) => {
204:            if (event.key === upgrade.key) {
206:                if (this.state.credits >= currentCost) {
207:                    if (this.upgradeManager.applyUpgrade(name)) {
216:    startGameLoop() {
222:    gameLoop(timestamp) {
223:        if (this.paused) {
239:    update(deltaTime) {
256:        this.enemies.forEach(enemy => {
257:            if (enemy instanceof ShooterEnemy) {
260:            } else {
268:        this.enemyProjectiles = this.enemyProjectiles.filter(projectile => {
269:            if (projectile.collidesWith(this.station) && this.state.invulnerableTime <= 0) {
270:                if (this.station.shield > 0) {
272:                } else {
282:        if (this.state.powerupTimer >= this.state.powerupInterval) {
289:        this.state.activePowerups = this.state.activePowerups.filter(powerup => {
290:            if (powerup.collidesWith(this.station)) {
301:        this.enemies.forEach(enemy => {
306:        this.enemyProjectiles = this.enemyProjectiles.filter(projectile => {
315:        if (this.currentWave) {
316:            if (this.currentWave.isComplete) {
318:                if (this.waveTimer >= this.waveCooldown) {
321:            } else if (this.currentWave.canSpawnEnemy(Date.now())) {
323:                if (enemyData) {
325:                    console.log(`Spawned ${enemyData.type} enemy`); // Debug log
331:        if (this.currentWave && this.currentWave.isComplete && !this.currentWave.rewardGiven) {
337:    handleWaveCompletion() {
346:            `Wave ${this.waveNumber} Complete!`,
353:            `+${waveReward} 💰`,
358:        for (let i = 0; i < 8; i++) {
359:            setTimeout(() => {
372:    updateGameState(deltaTime) {
373:        if (this.state.invulnerableTime > 0) {
377:        if (this.state.gameTime % GAME_CONFIG.SHIELD_DECREASE_INTERVAL < deltaTime) {
382:    updateGameObjects() {
388:        this.enemies.forEach(enemy => {
389:            if (enemy instanceof ShooterEnemy) {
392:            } else {
400:    checkCollisions() {
405:    checkEnemyCollisions() {
406:        this.enemies = this.enemies.filter(enemy => {
407:            if (enemy.collidesWith(this.station)) {
408:                if (this.station.invincible) {
420:                if (damageTaken) {
427:                    if (stolenCredits > 0) {
432:                            `-${stolenCredits}💰`,
440:                        `-${waveDamage}❤️`,
455:    checkProjectileCollisions() {
456:        this.projectiles = this.projectiles.filter(projectile => {
460:            this.enemies = this.enemies.filter(enemy => {
461:                if (!hit && projectile.collidesWith(enemy)) {
474:    handleEnemyDeath(enemy, isCollision = false) {
484:            `+${creditReward}💰`,
501:    handleProjectileHit(enemy) {
512:        if (enemy.health <= 0) {
519:        if (this.comboCounter % GAME_CONFIG.COMBO_THRESHOLD === 0) {
525:    cleanupObjects() {
529:        if (this.station.health <= 0 && this.state.invulnerableTime <= 0) {
534:    isProjectileOnScreen(projectile) {
539:    handleGameOver() {
547:    resetGame() {
557:        if (this.sounds.background) {
563:    showGameOverPopup() {
565:        const gameStats = {
597:                        <td>${gameStats.score}</td>
601:                        <td>${gameStats.time}</td>
605:                        <td>${gameStats.enemiesKilled}</td>
609:                        <td>${gameStats.credits}</td>
613:                        <td>${gameStats.difficulty}x</td>
631:            &:hover {
636:        retryButton.addEventListener('click', () => {
646:    formatTime(milliseconds) {
650:        return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
653:    draw() {
663:        this.floatingTexts.forEach((text, index) => {
664:            if (!text || typeof text.draw !== 'function') {
666:            } else {
673:    playSound(soundName) {
674:        if (!this.state.muted && this.sounds[soundName]) {
680:    playBackgroundMusic() {
688:        const startMusic = () => {
696:    roundRect(x, y, width, height, radius) {
710:    spawnEnemy() {
741:    getRandomSpawnPoint() {
745:        switch(spawnSide) {
752:        return { x, y };
755:    spawnPowerUp() {
760:        do {
768:    handlePowerUpCollection(powerup) {
798:    updateComboSystem(deltaTime) {
799:        if (this.comboCounter > 0) {
801:            if (this.comboTimer > GAME_CONFIG.COMBO_RESET_TIME) {
808:    checkBossSpawn() {
809:        if (this.state.gameTime > GAME_CONFIG.BOSS_SPAWN_TIME && !this.bossSpawned) {
815:    spawnBoss() {
821:    startNextWave() {
830:            `Wave ${this.waveNumber}`,
835:    spawnWaveEnemy(enemyData) {
840:        switch(enemyData.type) {
864:    handleEnemyDeath(enemy, isCollision = false) {
877:            `+${creditReward}💰`,
891:        if (this.currentWave) {
896:    handleAbilityEffects(explosions) {
897:        explosions.forEach(exp => {
898:            setTimeout(() => {
902:                this.enemies.forEach(enemy => {
907:                    if (distance < 150) {
910:                        if (exp.pullForce) {
1:import { GAME_CONFIG } from '../config/GameConfig.js';
2:import { GameState } from './GameState.js';
3:import { GameRenderer } from './GameRenderer.js';
4:import { SpaceStation } from '../objects/SpaceStation.js';
5:import { Projectile } from '../objects/Projectile.js';
6:import { Enemy} from '../objects/Enemy.js';
7:import { ShooterEnemy } from '../objects/ShooterEnemy.js';
8:import { SpeedyEnemy } from '../objects/SpeedyEnemy.js';
9:import { Explosion } from '../objects/Explosion.js';
10:import { GameUpgradeManager } from './GameUpgradeManager.js';
11:import { PowerUp } from '../objects/PowerUp.js';
12:import { BossEnemy } from '../objects/BossEnemy.js'; // Add this import
13:import { FloatingText } from '../objects/FloatingText.js';
14:import { Wave } from '../objects/Wave.js';
16:class Game {
17:    constructor() {
33:        window.keysPressed = {};
48:        this.entityManager = {
59:    initializeCanvas() {
64:        const updateCanvasSize = () => {
71:            if (this.station) {
84:    initializeSounds() {
85:        const sounds = {
96:        Object.values(sounds).forEach(sound => {
97:            if (sound) {
105:    handleSoundError(error) {
110:    setupEventListeners() {
116:        window.addEventListener('keydown', (e) => {
120:        window.addEventListener('keyup', (e) => {
125:    handleClick(event) {
142:    isPointInButton(x, y, buttonX, buttonY, buttonSize) {
147:    fireProjectiles(targetX, targetY) {
148:        for (let i = 0; i < this.station.turrets; i++) {
161:    handleMouseMove(event) {
168:    handleKeyDown(event) {
170:        if (event.code === 'Space') {
173:        if (event.code === 'KeyQ') {
178:        if (event.code === 'Space') {
180:            if (explosions) {
190:        if (event.key === 'Control') {
192:            if (explosions) {
203:        Object.entries(this.upgradeManager.upgrades).forEach(([name, upgrade]) => {
204:            if (event.key === upgrade.key) {
206:                if (this.state.credits >= currentCost) {
207:                    if (this.upgradeManager.applyUpgrade(name)) {
216:    startGameLoop() {
222:    gameLoop(timestamp) {
223:        if (this.paused) {
239:    update(deltaTime) {
256:        this.enemies.forEach(enemy => {
257:            if (enemy instanceof ShooterEnemy) {
260:            } else {
268:        this.enemyProjectiles = this.enemyProjectiles.filter(projectile => {
269:            if (projectile.collidesWith(this.station) && this.state.invulnerableTime <= 0) {
270:                if (this.station.shield > 0) {
272:                } else {
282:        if (this.state.powerupTimer >= this.state.powerupInterval) {
289:        this.state.activePowerups = this.state.activePowerups.filter(powerup => {
290:            if (powerup.collidesWith(this.station)) {
301:        this.enemies.forEach(enemy => {
306:        this.enemyProjectiles = this.enemyProjectiles.filter(projectile => {
315:        if (this.currentWave) {
316:            if (this.currentWave.isComplete) {
318:                if (this.waveTimer >= this.waveCooldown) {
321:            } else if (this.currentWave.canSpawnEnemy(Date.now())) {
323:                if (enemyData) {
325:                    console.log(`Spawned ${enemyData.type} enemy`); // Debug log
331:        if (this.currentWave && this.currentWave.isComplete && !this.currentWave.rewardGiven) {
337:    handleWaveCompletion() {
346:            `Wave ${this.waveNumber} Complete!`,
353:            `+${waveReward} 💰`,
358:        for (let i = 0; i < 8; i++) {
359:            setTimeout(() => {
372:    updateGameState(deltaTime) {
373:        if (this.state.invulnerableTime > 0) {
377:        if (this.state.gameTime % GAME_CONFIG.SHIELD_DECREASE_INTERVAL < deltaTime) {
382:    updateGameObjects() {
388:        this.enemies.forEach(enemy => {
389:            if (enemy instanceof ShooterEnemy) {
392:            } else {
400:    checkCollisions() {
405:    checkEnemyCollisions() {
406:        this.enemies = this.enemies.filter(enemy => {
407:            if (enemy.collidesWith(this.station)) {
408:                if (this.station.invincible) {
420:                if (damageTaken) {
427:                    if (stolenCredits > 0) {
432:                            `-${stolenCredits}💰`,
440:                        `-${waveDamage}❤️`,
455:    checkProjectileCollisions() {
456:        this.projectiles = this.projectiles.filter(projectile => {
460:            this.enemies = this.enemies.filter(enemy => {
461:                if (!hit && projectile.collidesWith(enemy)) {
474:    handleEnemyDeath(enemy, isCollision = false) {
484:            `+${creditReward}💰`,
501:    handleProjectileHit(enemy) {
512:        if (enemy.health <= 0) {
519:        if (this.comboCounter % GAME_CONFIG.COMBO_THRESHOLD === 0) {
525:    cleanupObjects() {
529:        if (this.station.health <= 0 && this.state.invulnerableTime <= 0) {
534:    isProjectileOnScreen(projectile) {
539:    handleGameOver() {
547:    resetGame() {
557:        if (this.sounds.background) {
563:    showGameOverPopup() {
565:        const gameStats = {
597:                        <td>${gameStats.score}</td>
601:                        <td>${gameStats.time}</td>
605:                        <td>${gameStats.enemiesKilled}</td>
609:                        <td>${gameStats.credits}</td>
613:                        <td>${gameStats.difficulty}x</td>
631:            &:hover {
636:        retryButton.addEventListener('click', () => {
646:    formatTime(milliseconds) {
650:        return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
653:    draw() {
663:        this.floatingTexts.forEach((text, index) => {
664:            if (!text || typeof text.draw !== 'function') {
666:            } else {
673:    playSound(soundName) {
674:        if (!this.state.muted && this.sounds[soundName]) {
680:    playBackgroundMusic() {
688:        const startMusic = () => {
696:    roundRect(x, y, width, height, radius) {
710:    spawnEnemy() {
741:    getRandomSpawnPoint() {
745:        switch(spawnSide) {
752:        return { x, y };
755:    spawnPowerUp() {
760:        do {
768:    handlePowerUpCollection(powerup) {
798:    updateComboSystem(deltaTime) {
799:        if (this.comboCounter > 0) {
801:            if (this.comboTimer > GAME_CONFIG.COMBO_RESET_TIME) {
808:    checkBossSpawn() {
809:        if (this.state.gameTime > GAME_CONFIG.BOSS_SPAWN_TIME && !this.bossSpawned) {
815:    spawnBoss() {
821:    startNextWave() {
830:            `Wave ${this.waveNumber}`,
835:    spawnWaveEnemy(enemyData) {
840:        switch(enemyData.type) {
864:    handleEnemyDeath(enemy, isCollision = false) {
877:            `+${creditReward}💰`,
891:        if (this.currentWave) {
896:    handleAbilityEffects(explosions) {
897:        explosions.forEach(exp => {
898:            setTimeout(() => {
902:                this.enemies.forEach(enemy => {
907:                    if (distance < 150) {
910:                        if (exp.pullForce) {
1:import { GAME_CONFIG } from '../config/GameConfig.js';
2:import { GameState } from './GameState.js';
3:import { GameRenderer } from './GameRenderer.js';
4:import { SpaceStation } from '../objects/SpaceStation.js';
5:import { Projectile } from '../objects/Projectile.js';
6:import { Enemy} from '../objects/Enemy.js';
7:import { ShooterEnemy } from '../objects/ShooterEnemy.js';
8:import { SpeedyEnemy } from '../objects/SpeedyEnemy.js';
9:import { Explosion } from '../objects/Explosion.js';
10:import { GameUpgradeManager } from './GameUpgradeManager.js';
11:import { PowerUp } from '../objects/PowerUp.js';
12:import { BossEnemy } from '../objects/BossEnemy.js'; // Add this import
13:import { FloatingText } from '../objects/FloatingText.js';
14:import { Wave } from '../objects/Wave.js';
16:class Game {
17:    constructor() {
33:        window.keysPressed = {};
48:        this.entityManager = {
59:    initializeCanvas() {
64:        const updateCanvasSize = () => {
71:            if (this.station) {
84:    initializeSounds() {
85:        const sounds = {
96:        Object.values(sounds).forEach(sound => {
97:            if (sound) {
105:    handleSoundError(error) {
110:    setupEventListeners() {
116:        window.addEventListener('keydown', (e) => {
120:        window.addEventListener('keyup', (e) => {
125:    handleClick(event) {
142:    isPointInButton(x, y, buttonX, buttonY, buttonSize) {
147:    fireProjectiles(targetX, targetY) {
148:        for (let i = 0; i < this.station.turrets; i++) {
161:    handleMouseMove(event) {
168:    handleKeyDown(event) {
170:        if (event.code === 'Space') {
173:        if (event.code === 'KeyQ') {
178:        if (event.code === 'Space') {
180:            if (explosions) {
190:        if (event.key === 'Control') {
192:            if (explosions) {
203:        Object.entries(this.upgradeManager.upgrades).forEach(([name, upgrade]) => {
204:            if (event.key === upgrade.key) {
206:                if (this.state.credits >= currentCost) {
207:                    if (this.upgradeManager.applyUpgrade(name)) {
216:    startGameLoop() {
222:    gameLoop(timestamp) {
223:        if (this.paused) {
239:    update(deltaTime) {
256:        this.enemies.forEach(enemy => {
257:            if (enemy instanceof ShooterEnemy) {
260:            } else {
268:        this.enemyProjectiles = this.enemyProjectiles.filter(projectile => {
269:            if (projectile.collidesWith(this.station) && this.state.invulnerableTime <= 0) {
270:                if (this.station.shield > 0) {
272:                } else {
282:        if (this.state.powerupTimer >= this.state.powerupInterval) {
289:        this.state.activePowerups = this.state.activePowerups.filter(powerup => {
290:            if (powerup.collidesWith(this.station)) {
301:        this.enemies.forEach(enemy => {
306:        this.enemyProjectiles = this.enemyProjectiles.filter(projectile => {
315:        if (this.currentWave) {
316:            if (this.currentWave.isComplete) {
318:                if (this.waveTimer >= this.waveCooldown) {
321:            } else if (this.currentWave.canSpawnEnemy(Date.now())) {
323:                if (enemyData) {
325:                    console.log(`Spawned ${enemyData.type} enemy`); // Debug log
331:        if (this.currentWave && this.currentWave.isComplete && !this.currentWave.rewardGiven) {
337:    handleWaveCompletion() {
346:            `Wave ${this.waveNumber} Complete!`,
353:            `+${waveReward} 💰`,
358:        for (let i = 0; i < 8; i++) {
359:            setTimeout(() => {
372:    updateGameState(deltaTime) {
373:        if (this.state.invulnerableTime > 0) {
377:        if (this.state.gameTime % GAME_CONFIG.SHIELD_DECREASE_INTERVAL < deltaTime) {
382:    updateGameObjects() {
388:        this.enemies.forEach(enemy => {
389:            if (enemy instanceof ShooterEnemy) {
392:            } else {
400:    checkCollisions() {
405:    checkEnemyCollisions() {
406:        this.enemies = this.enemies.filter(enemy => {
407:            if (enemy.collidesWith(this.station)) {
408:                if (this.station.invincible) {
420:                if (damageTaken) {
427:                    if (stolenCredits > 0) {
432:                            `-${stolenCredits}💰`,
440:                        `-${waveDamage}❤️`,
455:    checkProjectileCollisions() {
456:        this.projectiles = this.projectiles.filter(projectile => {
460:            this.enemies = this.enemies.filter(enemy => {
461:                if (!hit && projectile.collidesWith(enemy)) {
474:    handleEnemyDeath(enemy, isCollision = false) {
484:            `+${creditReward}💰`,
501:    handleProjectileHit(enemy) {
512:        if (enemy.health <= 0) {
519:        if (this.comboCounter % GAME_CONFIG.COMBO_THRESHOLD === 0) {
525:    cleanupObjects() {
529:        if (this.station.health <= 0 && this.state.invulnerableTime <= 0) {
534:    isProjectileOnScreen(projectile) {
539:    handleGameOver() {
547:    resetGame() {
557:        if (this.sounds.background) {
563:    showGameOverPopup() {
565:        const gameStats = {
597:                        <td>${gameStats.score}</td>
601:                        <td>${gameStats.time}</td>
605:                        <td>${gameStats.enemiesKilled}</td>
609:                        <td>${gameStats.credits}</td>
613:                        <td>${gameStats.difficulty}x</td>
631:            &:hover {
636:        retryButton.addEventListener('click', () => {
646:    formatTime(milliseconds) {
650:        return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
653:    draw() {
663:        this.floatingTexts.forEach((text, index) => {
664:            if (!text || typeof text.draw !== 'function') {
666:            } else {
673:    playSound(soundName) {
674:        if (!this.state.muted && this.sounds[soundName]) {
680:    playBackgroundMusic() {
688:        const startMusic = () => {
696:    roundRect(x, y, width, height, radius) {
710:    spawnEnemy() {
741:    getRandomSpawnPoint() {
745:        switch(spawnSide) {
752:        return { x, y };
755:    spawnPowerUp() {
760:        do {
768:    handlePowerUpCollection(powerup) {
798:    updateComboSystem(deltaTime) {
799:        if (this.comboCounter > 0) {
801:            if (this.comboTimer > GAME_CONFIG.COMBO_RESET_TIME) {
808:    checkBossSpawn() {
809:        if (this.state.gameTime > GAME_CONFIG.BOSS_SPAWN_TIME && !this.bossSpawned) {
815:    spawnBoss() {
821:    startNextWave() {
830:            `Wave ${this.waveNumber}`,
835:    spawnWaveEnemy(enemyData) {
840:        switch(enemyData.type) {
864:    handleEnemyDeath(enemy, isCollision = false) {
877:            `+${creditReward}💰`,
891:        if (this.currentWave) {
896:    handleAbilityEffects(explosions) {
897:        explosions.forEach(exp => {
898:            setTimeout(() => {
902:                this.enemies.forEach(enemy => {
907:                    if (distance < 150) {
910:                        if (exp.pullForce) {
1:import { GAME_CONFIG } from '../config/GameConfig.js';
2:import { GameState } from './GameState.js';
3:import { GameRenderer } from './GameRenderer.js';
4:import { SpaceStation } from '../objects/SpaceStation.js';
5:import { Projectile } from '../objects/Projectile.js';
6:import { Enemy} from '../objects/Enemy.js';
7:import { ShooterEnemy } from '../objects/ShooterEnemy.js';
8:import { SpeedyEnemy } from '../objects/SpeedyEnemy.js';
9:import { Explosion } from '../objects/Explosion.js';
10:import { GameUpgradeManager } from './GameUpgradeManager.js';
11:import { PowerUp } from '../objects/PowerUp.js';
12:import { BossEnemy } from '../objects/BossEnemy.js'; // Add this import
13:import { FloatingText } from '../objects/FloatingText.js';
14:import { Wave } from '../objects/Wave.js';
16:class Game {
17:    constructor() {
33:        window.keysPressed = {};
48:        this.entityManager = {
59:    initializeCanvas() {
64:        const updateCanvasSize = () => {
71:            if (this.station) {
84:    initializeSounds() {
85:        const sounds = {
96:        Object.values(sounds).forEach(sound => {
97:            if (sound) {
105:    handleSoundError(error) {
110:    setupEventListeners() {
116:        window.addEventListener('keydown', (e) => {
120:        window.addEventListener('keyup', (e) => {
125:    handleClick(event) {
142:    isPointInButton(x, y, buttonX, buttonY, buttonSize) {
147:    fireProjectiles(targetX, targetY) {
148:        for (let i = 0; i < this.station.turrets; i++) {
161:    handleMouseMove(event) {
168:    handleKeyDown(event) {
170:        if (event.code === 'Space') {
173:        if (event.code === 'KeyQ') {
178:        if (event.code === 'Space') {
180:            if (explosions) {
190:        if (event.key === 'Control') {
192:            if (explosions) {
203:        Object.entries(this.upgradeManager.upgrades).forEach(([name, upgrade]) => {
204:            if (event.key === upgrade.key) {
206:                if (this.state.credits >= currentCost) {
207:                    if (this.upgradeManager.applyUpgrade(name)) {
216:    startGameLoop() {
222:    gameLoop(timestamp) {
223:        if (this.paused) {
239:    update(deltaTime) {
256:        this.enemies.forEach(enemy => {
257:            if (enemy instanceof ShooterEnemy) {
260:            } else {
268:        this.enemyProjectiles = this.enemyProjectiles.filter(projectile => {
269:            if (projectile.collidesWith(this.station) && this.state.invulnerableTime <= 0) {
270:                if (this.station.shield > 0) {
272:                } else {
282:        if (this.state.powerupTimer >= this.state.powerupInterval) {
289:        this.state.activePowerups = this.state.activePowerups.filter(powerup => {
290:            if (powerup.collidesWith(this.station)) {
301:        this.enemies.forEach(enemy => {
306:        this.enemyProjectiles = this.enemyProjectiles.filter(projectile => {
315:        if (this.currentWave) {
316:            if (this.currentWave.isComplete) {
318:                if (this.waveTimer >= this.waveCooldown) {
321:            } else if (this.currentWave.canSpawnEnemy(Date.now())) {
323:                if (enemyData) {
325:                    console.log(`Spawned ${enemyData.type} enemy`); // Debug log
331:        if (this.currentWave && this.currentWave.isComplete && !this.currentWave.rewardGiven) {
337:    handleWaveCompletion() {
346:            `Wave ${this.waveNumber} Complete!`,
353:            `+${waveReward} 💰`,
358:        for (let i = 0; i < 8; i++) {
359:            setTimeout(() => {
372:    updateGameState(deltaTime) {
373:        if (this.state.invulnerableTime > 0) {
377:        if (this.state.gameTime % GAME_CONFIG.SHIELD_DECREASE_INTERVAL < deltaTime) {
382:    updateGameObjects() {
388:        this.enemies.forEach(enemy => {
389:            if (enemy instanceof ShooterEnemy) {
392:            } else {
400:    checkCollisions() {
405:    checkEnemyCollisions() {
406:        this.enemies = this.enemies.filter(enemy => {
407:            if (enemy.collidesWith(this.station)) {
408:                if (this.station.invincible) {
420:                if (damageTaken) {
427:                    if (stolenCredits > 0) {
432:                            `-${stolenCredits}💰`,
440:                        `-${waveDamage}❤️`,
455:    checkProjectileCollisions() {
456:        this.projectiles = this.projectiles.filter(projectile => {
460:            this.enemies = this.enemies.filter(enemy => {
461:                if (!hit && projectile.collidesWith(enemy)) {
474:    handleEnemyDeath(enemy, isCollision = false) {
484:            `+${creditReward}💰`,
501:    handleProjectileHit(enemy) {
512:        if (enemy.health <= 0) {
519:        if (this.comboCounter % GAME_CONFIG.COMBO_THRESHOLD === 0) {
525:    cleanupObjects() {
529:        if (this.station.health <= 0 && this.state.invulnerableTime <= 0) {
534:    isProjectileOnScreen(projectile) {
539:    handleGameOver() {
547:    resetGame() {
557:        if (this.sounds.background) {
563:    showGameOverPopup() {
565:        const gameStats = {
597:                        <td>${gameStats.score}</td>
601:                        <td>${gameStats.time}</td>
605:                        <td>${gameStats.enemiesKilled}</td>
609:                        <td>${gameStats.credits}</td>
613:                        <td>${gameStats.difficulty}x</td>
631:            &:hover {
636:        retryButton.addEventListener('click', () => {
646:    formatTime(milliseconds) {
650:        return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
653:    draw() {
663:        this.floatingTexts.forEach((text, index) => {
664:            if (!text || typeof text.draw !== 'function') {
666:            } else {
673:    playSound(soundName) {
674:        if (!this.state.muted && this.sounds[soundName]) {
680:    playBackgroundMusic() {
688:        const startMusic = () => {
696:    roundRect(x, y, width, height, radius) {
710:    spawnEnemy() {
741:    getRandomSpawnPoint() {
745:        switch(spawnSide) {
752:        return { x, y };
755:    spawnPowerUp() {
760:        do {
768:    handlePowerUpCollection(powerup) {
798:    updateComboSystem(deltaTime) {
799:        if (this.comboCounter > 0) {
801:            if (this.comboTimer > GAME_CONFIG.COMBO_RESET_TIME) {
808:    checkBossSpawn() {
809:        if (this.state.gameTime > GAME_CONFIG.BOSS_SPAWN_TIME && !this.bossSpawned) {
815:    spawnBoss() {
821:    startNextWave() {
830:            `Wave ${this.waveNumber}`,
835:    spawnWaveEnemy(enemyData) {
840:        switch(enemyData.type) {
864:    handleEnemyDeath(enemy, isCollision = false) {
877:            `+${creditReward}💰`,
891:        if (this.currentWave) {
896:    handleAbilityEffects(explosions) {
897:        explosions.forEach(exp => {
898:            setTimeout(() => {
902:                this.enemies.forEach(enemy => {
907:                    if (distance < 150) {
910:                        if (exp.pullForce) {
1:import { GAME_CONFIG } from '../config/GameConfig.js';
2:import { GameState } from './GameState.js';
3:import { GameRenderer } from './GameRenderer.js';
4:import { SpaceStation } from '../objects/SpaceStation.js';
5:import { Projectile } from '../objects/Projectile.js';
6:import { Enemy} from '../objects/Enemy.js';
7:import { ShooterEnemy } from '../objects/ShooterEnemy.js';
8:import { SpeedyEnemy } from '../objects/SpeedyEnemy.js';
9:import { Explosion } from '../objects/Explosion.js';
10:import { GameUpgradeManager } from './GameUpgradeManager.js';
11:import { PowerUp } from '../objects/PowerUp.js';
12:import { BossEnemy } from '../objects/BossEnemy.js'; // Add this import
13:import { FloatingText } from '../objects/FloatingText.js';
14:import { Wave } from '../objects/Wave.js';
16:class Game {
17:    constructor() {
33:        window.keysPressed = {};
48:        this.entityManager = {
59:    initializeCanvas() {
64:        const updateCanvasSize = () => {
71:            if (this.station) {
84:    initializeSounds() {
85:        const sounds = {
96:        Object.values(sounds).forEach(sound => {
97:            if (sound) {
105:    handleSoundError(error) {
110:    setupEventListeners() {
116:        window.addEventListener('keydown', (e) => {
120:        window.addEventListener('keyup', (e) => {
125:    handleClick(event) {
142:    isPointInButton(x, y, buttonX, buttonY, buttonSize) {
147:    fireProjectiles(targetX, targetY) {
148:        for (let i = 0; i < this.station.turrets; i++) {
161:    handleMouseMove(event) {
168:    handleKeyDown(event) {
170:        if (event.code === 'Space') {
173:        if (event.code === 'KeyQ') {
178:        if (event.code === 'Space') {
180:            if (explosions) {
190:        if (event.key === 'Control') {
192:            if (explosions) {
203:        Object.entries(this.upgradeManager.upgrades).forEach(([name, upgrade]) => {
204:            if (event.key === upgrade.key) {
206:                if (this.state.credits >= currentCost) {
207:                    if (this.upgradeManager.applyUpgrade(name)) {
216:    startGameLoop() {
222:    gameLoop(timestamp) {
223:        if (this.paused) {
239:    update(deltaTime) {
256:        this.enemies.forEach(enemy => {
257:            if (enemy instanceof ShooterEnemy) {
260:            } else {
268:        this.enemyProjectiles = this.enemyProjectiles.filter(projectile => {
269:            if (projectile.collidesWith(this.station) && this.state.invulnerableTime <= 0) {
270:                if (this.station.shield > 0) {
272:                } else {
282:        if (this.state.powerupTimer >= this.state.powerupInterval) {
289:        this.state.activePowerups = this.state.activePowerups.filter(powerup => {
290:            if (powerup.collidesWith(this.station)) {
301:        this.enemies.forEach(enemy => {
306:        this.enemyProjectiles = this.enemyProjectiles.filter(projectile => {
315:        if (this.currentWave) {
316:            if (this.currentWave.isComplete) {
318:                if (this.waveTimer >= this.waveCooldown) {
321:            } else if (this.currentWave.canSpawnEnemy(Date.now())) {
323:                if (enemyData) {
325:                    console.log(`Spawned ${enemyData.type} enemy`); // Debug log
331:        if (this.currentWave && this.currentWave.isComplete && !this.currentWave.rewardGiven) {
337:    handleWaveCompletion() {
346:            `Wave ${this.waveNumber} Complete!`,
353:            `+${waveReward} 💰`,
358:        for (let i = 0; i < 8; i++) {
359:            setTimeout(() => {
372:    updateGameState(deltaTime) {
373:        if (this.state.invulnerableTime > 0) {
377:        if (this.state.gameTime % GAME_CONFIG.SHIELD_DECREASE_INTERVAL < deltaTime) {
382:    updateGameObjects() {
388:        this.enemies.forEach(enemy => {
389:            if (enemy instanceof ShooterEnemy) {
392:            } else {
400:    checkCollisions() {
405:    checkEnemyCollisions() {
406:        this.enemies = this.enemies.filter(enemy => {
407:            if (enemy.collidesWith(this.station)) {
408:                if (this.station.invincible) {
420:                if (damageTaken) {
427:                    if (stolenCredits > 0) {
432:                            `-${stolenCredits}💰`,
440:                        `-${waveDamage}❤️`,
455:    checkProjectileCollisions() {
456:        this.projectiles = this.projectiles.filter(projectile => {
460:            this.enemies = this.enemies.filter(enemy => {
461:                if (!hit && projectile.collidesWith(enemy)) {
474:    handleEnemyDeath(enemy, isCollision = false) {
484:            `+${creditReward}💰`,
501:    handleProjectileHit(enemy) {
512:        if (enemy.health <= 0) {
519:        if (this.comboCounter % GAME_CONFIG.COMBO_THRESHOLD === 0) {
525:    cleanupObjects() {
529:        if (this.station.health <= 0 && this.state.invulnerableTime <= 0) {
534:    isProjectileOnScreen(projectile) {
539:    handleGameOver() {
547:    resetGame() {
557:        if (this.sounds.background) {
563:    showGameOverPopup() {
565:        const gameStats = {
597:                        <td>${gameStats.score}</td>
601:                        <td>${gameStats.time}</td>
605:                        <td>${gameStats.enemiesKilled}</td>
609:                        <td>${gameStats.credits}</td>
613:                        <td>${gameStats.difficulty}x</td>
631:            &:hover {
636:        retryButton.addEventListener('click', () => {
646:    formatTime(milliseconds) {
650:        return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
653:    draw() {
663:        this.floatingTexts.forEach((text, index) => {
664:            if (!text || typeof text.draw !== 'function') {
666:            } else {
673:    playSound(soundName) {
674:        if (!this.state.muted && this.sounds[soundName]) {
680:    playBackgroundMusic() {
688:        const startMusic = () => {
696:    roundRect(x, y, width, height, radius) {
710:    spawnEnemy() {
741:    getRandomSpawnPoint() {
745:        switch(spawnSide) {
752:        return { x, y };
755:    spawnPowerUp() {
760:        do {
768:    handlePowerUpCollection(powerup) {
798:    updateComboSystem(deltaTime) {
799:        if (this.comboCounter > 0) {
801:            if (this.comboTimer > GAME_CONFIG.COMBO_RESET_TIME) {
808:    checkBossSpawn() {
809:        if (this.state.gameTime > GAME_CONFIG.BOSS_SPAWN_TIME && !this.bossSpawned) {
815:    spawnBoss() {
821:    startNextWave() {
830:            `Wave ${this.waveNumber}`,
835:    spawnWaveEnemy(enemyData) {
840:        switch(enemyData.type) {
864:    handleEnemyDeath(enemy, isCollision = false) {
877:            `+${creditReward}💰`,
891:        if (this.currentWave) {
896:    handleAbilityEffects(explosions) {
897:        explosions.forEach(exp => {
898:            setTimeout(() => {
902:                this.enemies.forEach(enemy => {
907:                    if (distance < 150) {
910:                        if (exp.pullForce) {
------------------------ 
 
FILE: C:\Users\Compiuter\Desktop\CRIPTO_SITO\space station\src\game\GameRenderer.js 
Imports found: 
2:import { GameStats } from '../utils/GameStats.js';
3:import { UpgradeBars } from '../utils/UpgradeBars.js';
4:import { AbilityButtons } from '../utils/AbilityButtons.js';
5:import { StarBackground } from '../utils/StarBackground.js';
6:import { Timer } from '../utils/Timer.js';
7:import { WaveIndicator } from '../utils/WaveIndicator.js';
 
Usage of imports: 
2:import { GameStats } from '../utils/GameStats.js';
3:import { UpgradeBars } from '../utils/UpgradeBars.js';
4:import { AbilityButtons } from '../utils/AbilityButtons.js';
5:import { StarBackground } from '../utils/StarBackground.js';
6:import { Timer } from '../utils/Timer.js';
7:import { WaveIndicator } from '../utils/WaveIndicator.js';
9:export class GameRenderer {
10:    constructor(ctx, width, height) {
20:    initializeUpgradeColors() {
30:    clearCanvas() {
35:    draw(game) {
36:        if (!game || !game.state || !game.station) {
74:        if (game.currentWave) {
2:import { GameStats } from '../utils/GameStats.js';
3:import { UpgradeBars } from '../utils/UpgradeBars.js';
4:import { AbilityButtons } from '../utils/AbilityButtons.js';
5:import { StarBackground } from '../utils/StarBackground.js';
6:import { Timer } from '../utils/Timer.js';
7:import { WaveIndicator } from '../utils/WaveIndicator.js';
9:export class GameRenderer {
10:    constructor(ctx, width, height) {
20:    initializeUpgradeColors() {
30:    clearCanvas() {
35:    draw(game) {
36:        if (!game || !game.state || !game.station) {
74:        if (game.currentWave) {
2:import { GameStats } from '../utils/GameStats.js';
3:import { UpgradeBars } from '../utils/UpgradeBars.js';
4:import { AbilityButtons } from '../utils/AbilityButtons.js';
5:import { StarBackground } from '../utils/StarBackground.js';
6:import { Timer } from '../utils/Timer.js';
7:import { WaveIndicator } from '../utils/WaveIndicator.js';
9:export class GameRenderer {
10:    constructor(ctx, width, height) {
20:    initializeUpgradeColors() {
30:    clearCanvas() {
35:    draw(game) {
36:        if (!game || !game.state || !game.station) {
74:        if (game.currentWave) {
2:import { GameStats } from '../utils/GameStats.js';
3:import { UpgradeBars } from '../utils/UpgradeBars.js';
4:import { AbilityButtons } from '../utils/AbilityButtons.js';
5:import { StarBackground } from '../utils/StarBackground.js';
6:import { Timer } from '../utils/Timer.js';
7:import { WaveIndicator } from '../utils/WaveIndicator.js';
9:export class GameRenderer {
10:    constructor(ctx, width, height) {
20:    initializeUpgradeColors() {
30:    clearCanvas() {
35:    draw(game) {
36:        if (!game || !game.state || !game.station) {
74:        if (game.currentWave) {
2:import { GameStats } from '../utils/GameStats.js';
3:import { UpgradeBars } from '../utils/UpgradeBars.js';
4:import { AbilityButtons } from '../utils/AbilityButtons.js';
5:import { StarBackground } from '../utils/StarBackground.js';
6:import { Timer } from '../utils/Timer.js';
7:import { WaveIndicator } from '../utils/WaveIndicator.js';
9:export class GameRenderer {
10:    constructor(ctx, width, height) {
20:    initializeUpgradeColors() {
30:    clearCanvas() {
35:    draw(game) {
36:        if (!game || !game.state || !game.station) {
74:        if (game.currentWave) {
2:import { GameStats } from '../utils/GameStats.js';
3:import { UpgradeBars } from '../utils/UpgradeBars.js';
4:import { AbilityButtons } from '../utils/AbilityButtons.js';
5:import { StarBackground } from '../utils/StarBackground.js';
6:import { Timer } from '../utils/Timer.js';
7:import { WaveIndicator } from '../utils/WaveIndicator.js';
9:export class GameRenderer {
10:    constructor(ctx, width, height) {
20:    initializeUpgradeColors() {
30:    clearCanvas() {
35:    draw(game) {
36:        if (!game || !game.state || !game.station) {
74:        if (game.currentWave) {
------------------------ 
 
FILE: C:\Users\Compiuter\Desktop\CRIPTO_SITO\space station\src\game\GameState.js 
Imports found: 
 
Usage of imports: 
------------------------ 
 
FILE: C:\Users\Compiuter\Desktop\CRIPTO_SITO\space station\src\game\GameUpgradeManager.js 
Imports found: 
 
Usage of imports: 
------------------------ 
 
FILE: C:\Users\Compiuter\Desktop\CRIPTO_SITO\space station\src\game\managers\EntityManager.js 
Imports found: 
1:import { SpaceStation } from '../../objects/SpaceStation.js';
 
Usage of imports: 
1:import { SpaceStation } from '../../objects/SpaceStation.js';
3:export class EntityManager {
4:    constructor(width, height) {
10:    update(deltaTime) {
14:    addEntity(entity) {
18:    removeEntity(entity) {
20:        if (index > -1) {
------------------------ 
 
FILE: C:\Users\Compiuter\Desktop\CRIPTO_SITO\space station\src\objects\BossEnemy.js 
Imports found: 
1:import { Projectile } from './Projectile.js';
2:import { Enemy } from './Enemy.js';
 
Usage of imports: 
1:import { Projectile } from './Projectile.js';
2:import { Enemy } from './Enemy.js';
4:export class BossEnemy extends Enemy {
5:    constructor(x, y) {
13:    update(station, width, height) {
21:        if (Date.now() - this.lastShot > 2000) {
1:import { Projectile } from './Projectile.js';
2:import { Enemy } from './Enemy.js';
4:export class BossEnemy extends Enemy {
5:    constructor(x, y) {
13:    update(station, width, height) {
21:        if (Date.now() - this.lastShot > 2000) {
------------------------ 
 
FILE: C:\Users\Compiuter\Desktop\CRIPTO_SITO\space station\src\objects\Enemy.js 
Imports found: 
1:import { GameObject } from './GameObject.js';
141:        // Use the constrainToCanvas method from GameObject
 
Usage of imports: 
1:import { GameObject } from './GameObject.js';
3:export class Enemy extends GameObject {
4:    static BEHAVIORS = {
14:    static SIZE_CATEGORIES = {
15:        SMALL: { min: 0.8, max: 1.1, speedMod: 1.2, healthMod: 0.8 },
16:        MEDIUM: { min: 1.1, max: 1.4, speedMod: 1.0, healthMod: 1.0 },
17:        LARGE: { min: 1.4, max: 1.8, speedMod: 0.8, healthMod: 1.3 },
18:        HUGE: { min: 1.8, max: 2.5, speedMod: 0.6, healthMod: 1.8 }
21:    constructor(x, y, level) {
37:    static calculateSizeMultiplier() {
41:    initializeStats(level, sizeMultiplier) {
43:        const { speedMod, healthMod } = Enemy.SIZE_CATEGORIES[category];
55:    initializeVisuals(level) {
57:        this.color = `rgb(200,${greenValue},${greenValue})`;
60:        this.accentColor = `hsla(${Math.random() * 360}, 70%, 50%, `;
65:    determineCategory(size) {
66:        for (const [category, values] of Object.entries(Enemy.SIZE_CATEGORIES)) {
72:    update(station, canvasWidth, canvasHeight) {
79:        if (this.behaviorType >= 3) {
80:            this.trailEffect.unshift({ x: this.x, y: this.y, age: 0 });
86:    moveTowardsTarget(station, canvasWidth, canvasHeight) {
91:        switch(this.behaviorType) {
93:                if (distance > 0) {
105:                if (distance > 0) {
118:                if (Math.sin(this.behaviorTimer * 0.05) > 0) {
121:                } else {
127:                if (distance > 0) {
145:    draw(ctx) {
150:    drawBody(ctx) {
151:        if (this.behaviorType >= 3) {
152:            this.trailEffect.forEach((p, i) => {
157:                ctx.fillStyle = `${this.accentColor}${alpha * 0.3})`;
169:        glow.addColorStop(0, `${this.accentColor}${0.3 * pulseIntensity})`);
170:        glow.addColorStop(1, `${this.accentColor}0)`);
176:        if (this.behaviorType <= 2) {
182:            for (let i = 0; i < 2; i++) {
185:                ctx.strokeStyle = `${this.accentColor}${0.8 - i * 0.3})`;
189:        } else {
196:    drawAdvancedEnemy(ctx) {
201:        for (let i = 0; i < this.points; i++) {
212:        ctx.strokeStyle = `${this.accentColor}0.8)`;
216:        if (this.sizeCategory === 'huge') {
217:            for (let i = 0; i < 3; i++) {
220:                ctx.strokeStyle = `${this.accentColor}${0.5 - i * 0.1})`;
227:    drawParticles(ctx) {
228:        for (let i = 0; i < this.particleCount; i++) {
237:            ctx.fillStyle = `${this.accentColor}0.8)`;
242:    drawHealthBar(ctx) {
256:    collidesWith(other) {
261:        if (distance < this.radius + other.radius) {
268:    createCollisionEffect() {
270:        setTimeout(() => {
------------------------ 
 
FILE: C:\Users\Compiuter\Desktop\CRIPTO_SITO\space station\src\objects\EnemyProjectile.js 
Imports found: 
1:import { Projectile } from './Projectile.js';
 
Usage of imports: 
1:import { Projectile } from './Projectile.js';
2:export class EnemyProjectile extends Projectile {
3:    constructor(x, y, targetX, targetY, speed, damage) {
9:    draw(ctx) {
------------------------ 
 
FILE: C:\Users\Compiuter\Desktop\CRIPTO_SITO\space station\src\objects\Explosion.js 
Imports found: 
1:import { GameObject } from './GameObject.js';
 
Usage of imports: 
1:import { GameObject } from './GameObject.js';
2:export class Explosion extends GameObject {
3:    constructor(x, y, color) {
11:        for (let i = 0; i < 8; i++) {
14:            this.particles.push({
24:    update() {
25:        this.particles.forEach(p => {
32:    draw(ctx) {
36:        this.particles.forEach(p => {
39:            ctx.fillStyle = `rgba(${this.getRGBValues(this.color)},${alpha})`;
44:    isDead() {
48:    getRGBValues(color) {
------------------------ 
 
FILE: C:\Users\Compiuter\Desktop\CRIPTO_SITO\space station\src\objects\FloatingText.js 
Imports found: 
 
Usage of imports: 
------------------------ 
 
FILE: C:\Users\Compiuter\Desktop\CRIPTO_SITO\space station\src\objects\GameObject.js 
Imports found: 
 
Usage of imports: 
------------------------ 
 
FILE: C:\Users\Compiuter\Desktop\CRIPTO_SITO\space station\src\objects\PowerUp.js 
Imports found: 
1:import { GameObject } from './GameObject.js';
 
Usage of imports: 
1:import { GameObject } from './GameObject.js';
2:export class PowerUp extends GameObject {
3:    constructor(x, y, type) {
19:    getPowerUpInfo(type) {
20:        const powerupTypes = {
21:            speed: { 
25:                effect: (station) => {
29:                remove: (station) => {
33:            shield: { 
37:                effect: (station) => {
41:                remove: (station) => {
45:            damage: { 
49:                effect: (station) => {
53:                remove: (station) => {
57:            multi: { 
61:                effect: (station) => {
65:                remove: (station) => {
69:            health: { 
73:                effect: (station) => {
77:            invincibility: { 
82:                remove: () => {} // La rimozione è già gestita da applyInvincibility
88:    update() {
95:        if (this.x < this.radius || this.x > window.innerWidth - this.radius) {
98:        if (this.y < this.radius || this.y > window.innerHeight - this.radius) {
103:    draw(ctx) {
115:        for (let i = 0; i < 8; i++) {
148:    apply(station) {
------------------------ 
 
FILE: C:\Users\Compiuter\Desktop\CRIPTO_SITO\space station\src\objects\Projectile.js 
Imports found: 
1:import { GameObject } from './GameObject.js';
 
Usage of imports: 
1:import { GameObject } from './GameObject.js';
2:export class Projectile extends GameObject {
3:    constructor(x, y, targetX, targetY, speed, damage) {
12:    update() {
17:    draw(ctx) {
------------------------ 
 
FILE: C:\Users\Compiuter\Desktop\CRIPTO_SITO\space station\src\objects\ShooterEnemy.js 
Imports found: 
1:import { Enemy } from './Enemy.js';
2:import { EnemyProjectile } from './EnemyProjectile.js';
 
Usage of imports: 
1:import { Enemy } from './Enemy.js';
2:import { EnemyProjectile } from './EnemyProjectile.js';
4:export class ShooterEnemy extends Enemy {
5:    constructor(x, y, level, entityManager) {
14:        this.baseColor = `rgb(100,100,${Math.min(255, 150 + level * 20)})`;
31:    update(station, canvasWidth, canvasHeight) {
42:        if (distance < optimalDistance) {
45:        } else if (distance > optimalDistance + 100) {
57:        if (timeTillShot < 500) {
59:            this.color = `rgb(${100 + 155 * this.chargeEffect},100,${Math.min(255, 150 + this.level * 20)})`;
60:        } else {
66:        if (currentTime - this.lastShot >= this.fireRate && this.entityManager) {
79:    drawBody(ctx) {
90:        ctx.strokeStyle = `rgba(${100 + 155 * this.chargeEffect},100,255,0.5)`;
102:        for (let i = 0; i < 8; i++) {
125:        if (this.chargeEffect > 0) {
128:            ctx.fillStyle = `rgba(255,100,100,${this.chargeEffect})`;
1:import { Enemy } from './Enemy.js';
2:import { EnemyProjectile } from './EnemyProjectile.js';
4:export class ShooterEnemy extends Enemy {
5:    constructor(x, y, level, entityManager) {
14:        this.baseColor = `rgb(100,100,${Math.min(255, 150 + level * 20)})`;
31:    update(station, canvasWidth, canvasHeight) {
42:        if (distance < optimalDistance) {
45:        } else if (distance > optimalDistance + 100) {
57:        if (timeTillShot < 500) {
59:            this.color = `rgb(${100 + 155 * this.chargeEffect},100,${Math.min(255, 150 + this.level * 20)})`;
60:        } else {
66:        if (currentTime - this.lastShot >= this.fireRate && this.entityManager) {
79:    drawBody(ctx) {
90:        ctx.strokeStyle = `rgba(${100 + 155 * this.chargeEffect},100,255,0.5)`;
102:        for (let i = 0; i < 8; i++) {
125:        if (this.chargeEffect > 0) {
128:            ctx.fillStyle = `rgba(255,100,100,${this.chargeEffect})`;
------------------------ 
 
FILE: C:\Users\Compiuter\Desktop\CRIPTO_SITO\space station\src\objects\SpaceStation.js 
Imports found: 
1:import { GameObject } from './GameObject.js';
393:            // Expanding nova effect from station
409:            // Vortex effect (also starts from station)
 
Usage of imports: 
1:import { GameObject } from './GameObject.js';
3:export class SpaceStation extends GameObject {
4:    constructor(x, y) {
72:    applyInvincibility(duration) {
78:    update(currentTime) {
100:        if (this.invincible) {
106:            if (this.invincibilityDuration <= 0) {
114:        if (this.autoFireActive) {
116:            if (this.autoFireDuration <= 0) {
121:        } else if (this.autoFireCooldown > 0) {
123:            if (this.autoFireCooldown === 0) {
126:        } else {
131:        if (this.novaActive) {
133:            if (this.novaDuration <= 0) {
138:        if (this.vortexActive) {
140:            if (this.vortexDuration <= 0) {
145:        if (!this.novaActive && !this.vortexActive) {
146:            if (this.abilityCooldown > 0) {
148:            } else if (this.abilityCharge < this.abilityMaxCharge) {
157:        if (this.autoFireCooldown > 0) {
162:        if (this.superAbilityCharge < this.superAbilityMaxCharge) {
167:        for (const [type, powerUp] of this.activePowerUps.entries()) {
169:            if (powerUp.remainingTime <= 0) {
178:    getKeys() {
179:        return {
187:    takeDamage(amount) {
188:        if (this.invincible) {
191:        if (this.shield > 0) {
193:            if (this.shield < 0) {
197:        } else {
203:    draw(ctx) {
205:        if (this.shield > 0) {
208:            gradient.addColorStop(0.5, `rgba(100, 200, 255, ${this.shield / 100})`);
217:        if (this.invincible) {
220:            ctx.strokeStyle = `rgba(255, 215, 0, ${this.invincibilityAlpha})`;
227:            ctx.strokeStyle = `rgba(255, 215, 0, ${this.invincibilityAlpha * 0.5})`;
252:        for (let i = 0; i < 4; i++) {
266:        for (let i = 0; i < this.turrets; i++) {
325:        for (const [type, powerUp] of this.activePowerUps.entries()) {
346:    activateAutoFire(duration) {
347:        if (!this.autoFireActive && this.autoFireCooldown <= 0) {
353:            for (let ring = 0; ring < 3; ring++) {
357:                for (let i = 0; i < points; i++) {
359:                    rings.push({
373:    autoFire() {
375:        if (this.autoFireActive) {
377:            if (this.autoFireTimer >= 125) {
385:    activateAbility(type = 'nova') {
392:        if (type === 'nova') {
394:            for (let i = 0; i < points; i++) {
398:                explosions.push({
408:        } else {
410:            for (let i = 0; i < points; i++) {
414:                explosions.push({
432:    deactivateAbility(type = 'nova') {
433:        if (type === 'nova') {
436:        } else {
443:    getAbilityProgress() {
444:        if (this.novaActive || this.vortexActive) {
450:        if (this.abilityCooldown > 0) {
456:    getAutoFireProgress() {
457:        if (this.autoFireActive) {
459:        } else if (this.autoFireCooldown > 0) {
465:    getChargeProgress() {
466:        if (this.superAbilityActive) {
469:        if (this.superAbilityCooldown > 0) {
475:    isInCooldown() {
479:    addPowerUp(type, effect, duration, color, icon, remove) {
481:        if (this.activePowerUps.has(type)) {
485:        if (duration > 0) {
486:            this.activePowerUps.set(type, {
------------------------ 
 
FILE: C:\Users\Compiuter\Desktop\CRIPTO_SITO\space station\src\objects\SpeedyEnemy.js 
Imports found: 
1:import { Enemy } from './Enemy.js';
 
Usage of imports: 
1:import { Enemy } from './Enemy.js';
2:export class SpeedyEnemy extends Enemy {
3:    constructor(x, y, level = 1) {  // Add default level
15:        this.color = `rgb(255,${greenValue},0)`;
21:    drawBody(ctx) {
55:        for(let i = 0; i < 3; i++) {
67:        for(let i = 0; i < 3; i++) {
------------------------ 
 
FILE: C:\Users\Compiuter\Desktop\CRIPTO_SITO\space station\src\objects\Wave.js 
Imports found: 
 
Usage of imports: 
------------------------ 
 
FILE: C:\Users\Compiuter\Desktop\CRIPTO_SITO\space station\src\ui\components\ResourceBar.js 
Imports found: 
1://importa tutto ciò che serve
2:import { GAME_CONFIG } from '../../config/GameConfig.js';
3:import { ColorUtils } from '../../utils/ColorUtils.js';
4:import { ShapeUtils } from '../../utils/ShapeUtils.js';
5:import { TextUtils } from '../../utils/TextUtils.js';
 
Usage of imports: 
1://importa tutto ciò che serve
2:import { GAME_CONFIG } from '../../config/GameConfig.js';
3:import { ColorUtils } from '../../utils/ColorUtils.js';
4:import { ShapeUtils } from '../../utils/ShapeUtils.js';
5:import { TextUtils } from '../../utils/TextUtils.js';
7:export class ResourceBar {
8:    constructor(ctx, x, y, width, height, colors) {
17:    draw(label, value, text, icon = '') {
25:    drawBackground() {
31:    drawForeground(value) {
32:        if (value > 0) {
33:            try {
37:            } catch (error) {
45:    drawIcon(icon, value) {
46:        if (icon) {
49:            TextUtils.drawText(this.ctx, icon, this.x + this.width / 2, this.y + this.height / 2, `${iconSize}px Arial`, iconColor, 'center', 'middle');
53:    drawText(text, icon) {
54:        if (text) {
55:            const displayText = icon ? `${icon} ${text}` : text;
2:import { GAME_CONFIG } from '../../config/GameConfig.js';
3:import { ColorUtils } from '../../utils/ColorUtils.js';
4:import { ShapeUtils } from '../../utils/ShapeUtils.js';
5:import { TextUtils } from '../../utils/TextUtils.js';
7:export class ResourceBar {
8:    constructor(ctx, x, y, width, height, colors) {
17:    draw(label, value, text, icon = '') {
25:    drawBackground() {
31:    drawForeground(value) {
32:        if (value > 0) {
33:            try {
37:            } catch (error) {
45:    drawIcon(icon, value) {
46:        if (icon) {
49:            TextUtils.drawText(this.ctx, icon, this.x + this.width / 2, this.y + this.height / 2, `${iconSize}px Arial`, iconColor, 'center', 'middle');
53:    drawText(text, icon) {
54:        if (text) {
55:            const displayText = icon ? `${icon} ${text}` : text;
2:import { GAME_CONFIG } from '../../config/GameConfig.js';
3:import { ColorUtils } from '../../utils/ColorUtils.js';
4:import { ShapeUtils } from '../../utils/ShapeUtils.js';
5:import { TextUtils } from '../../utils/TextUtils.js';
7:export class ResourceBar {
8:    constructor(ctx, x, y, width, height, colors) {
17:    draw(label, value, text, icon = '') {
25:    drawBackground() {
31:    drawForeground(value) {
32:        if (value > 0) {
33:            try {
37:            } catch (error) {
45:    drawIcon(icon, value) {
46:        if (icon) {
49:            TextUtils.drawText(this.ctx, icon, this.x + this.width / 2, this.y + this.height / 2, `${iconSize}px Arial`, iconColor, 'center', 'middle');
53:    drawText(text, icon) {
54:        if (text) {
55:            const displayText = icon ? `${icon} ${text}` : text;
2:import { GAME_CONFIG } from '../../config/GameConfig.js';
3:import { ColorUtils } from '../../utils/ColorUtils.js';
4:import { ShapeUtils } from '../../utils/ShapeUtils.js';
5:import { TextUtils } from '../../utils/TextUtils.js';
7:export class ResourceBar {
8:    constructor(ctx, x, y, width, height, colors) {
17:    draw(label, value, text, icon = '') {
25:    drawBackground() {
31:    drawForeground(value) {
32:        if (value > 0) {
33:            try {
37:            } catch (error) {
45:    drawIcon(icon, value) {
46:        if (icon) {
49:            TextUtils.drawText(this.ctx, icon, this.x + this.width / 2, this.y + this.height / 2, `${iconSize}px Arial`, iconColor, 'center', 'middle');
53:    drawText(text, icon) {
54:        if (text) {
55:            const displayText = icon ? `${icon} ${text}` : text;
------------------------ 
 
FILE: C:\Users\Compiuter\Desktop\CRIPTO_SITO\space station\src\ui\components\UIComponent.js 
Imports found: 
 
Usage of imports: 
------------------------ 
 
FILE: C:\Users\Compiuter\Desktop\CRIPTO_SITO\space station\src\utils\AbilityButtons.js 
Imports found: 
 
Usage of imports: 
------------------------ 
 
FILE: C:\Users\Compiuter\Desktop\CRIPTO_SITO\space station\src\utils\ColorUtils.js 
Imports found: 
 
Usage of imports: 
------------------------ 
 
FILE: C:\Users\Compiuter\Desktop\CRIPTO_SITO\space station\src\utils\GameStats.js 
Imports found: 
 
Usage of imports: 
------------------------ 
 
FILE: C:\Users\Compiuter\Desktop\CRIPTO_SITO\space station\src\utils\RenderUtils.js 
Imports found: 
 
Usage of imports: 
------------------------ 
 
FILE: C:\Users\Compiuter\Desktop\CRIPTO_SITO\space station\src\utils\ShapeUtils.js 
Imports found: 
 
Usage of imports: 
------------------------ 
 
FILE: C:\Users\Compiuter\Desktop\CRIPTO_SITO\space station\src\utils\StarBackground.js 
Imports found: 
 
Usage of imports: 
------------------------ 
 
FILE: C:\Users\Compiuter\Desktop\CRIPTO_SITO\space station\src\utils\TextUtils.js 
Imports found: 
 
Usage of imports: 
------------------------ 
 
FILE: C:\Users\Compiuter\Desktop\CRIPTO_SITO\space station\src\utils\Timer.js 
Imports found: 
 
Usage of imports: 
------------------------ 
 
FILE: C:\Users\Compiuter\Desktop\CRIPTO_SITO\space station\src\utils\UpgradeBars.js 
Imports found: 
1:import { ResourceBar } from "../ui/components/ResourceBar.js";
2:import { TextUtils } from "../utils/TextUtils.js";
 
Usage of imports: 
1:import { ResourceBar } from "../ui/components/ResourceBar.js";
2:import { TextUtils } from "../utils/TextUtils.js";
4:export class UpgradeBars {
5:    constructor(ctx, width, upgradeColors) {
11:    draw(gameState, upgradeManager, startX, startY, barWidth, barHeight, spacing) {
12:        const icons = {
25:        displayedUpgrades.forEach(([name, upgrade], index) => {
42:            if (name === 'Health') {
45:                displayText = `[${index + 1}] ${name} (${currentCost}💰) x${waveMultiplier}`;
46:            } else if (name === 'Turret') {
47:                displayText = `[${index + 1}] ${name} (${currentCost}💰) ${upgradeManager.upgradeCounts[name]}/10`;
48:            } else {
49:                displayText = `[${index + 1}] ${name} (${currentCost}💰)`;
66:    drawUpgradeCount(upgradeManager, name, startX, y, barHeight) {
68:        if (count > 0) {
69:            TextUtils.drawText(this.ctx, `x${count}`, startX - 50, y + barHeight - 2, 'bold 14px Arial', '#fff', 'right');
73:    drawButtonNumber(index, startX, y, barHeight) {
1:import { ResourceBar } from "../ui/components/ResourceBar.js";
2:import { TextUtils } from "../utils/TextUtils.js";
4:export class UpgradeBars {
5:    constructor(ctx, width, upgradeColors) {
11:    draw(gameState, upgradeManager, startX, startY, barWidth, barHeight, spacing) {
12:        const icons = {
25:        displayedUpgrades.forEach(([name, upgrade], index) => {
42:            if (name === 'Health') {
45:                displayText = `[${index + 1}] ${name} (${currentCost}💰) x${waveMultiplier}`;
46:            } else if (name === 'Turret') {
47:                displayText = `[${index + 1}] ${name} (${currentCost}💰) ${upgradeManager.upgradeCounts[name]}/10`;
48:            } else {
49:                displayText = `[${index + 1}] ${name} (${currentCost}💰)`;
66:    drawUpgradeCount(upgradeManager, name, startX, y, barHeight) {
68:        if (count > 0) {
69:            TextUtils.drawText(this.ctx, `x${count}`, startX - 50, y + barHeight - 2, 'bold 14px Arial', '#fff', 'right');
73:    drawButtonNumber(index, startX, y, barHeight) {
------------------------ 
 
FILE: C:\Users\Compiuter\Desktop\CRIPTO_SITO\space station\src\utils\WaveIndicator.js 
Imports found: 
 
Usage of imports: 
------------------------ 
 
Class Analysis: 
--------------- 
 
FILE: C:\Users\Compiuter\Desktop\CRIPTO_SITO\space station\src\components\AbilityButtons.js 
Classes found: 
1:export class AbilityButtons {
------------------------ 
 
FILE: C:\Users\Compiuter\Desktop\CRIPTO_SITO\space station\src\components\GameStats.js 
Classes found: 
4:export class GameStats extends UIComponent {
------------------------ 
 
FILE: C:\Users\Compiuter\Desktop\CRIPTO_SITO\space station\src\components\StarBackground.js 
Classes found: 
4:export class StarBackground extends UIComponent {
------------------------ 
 
FILE: C:\Users\Compiuter\Desktop\CRIPTO_SITO\space station\src\components\UpgradeBars.js 
Classes found: 
1:export class UpgradeBars {
------------------------ 
 
FILE: C:\Users\Compiuter\Desktop\CRIPTO_SITO\space station\src\config\GameConfig.js 
Classes found: 
------------------------ 
 
FILE: C:\Users\Compiuter\Desktop\CRIPTO_SITO\space station\src\game\Game.js 
Classes found: 
16:class Game {
------------------------ 
 
FILE: C:\Users\Compiuter\Desktop\CRIPTO_SITO\space station\src\game\GameRenderer.js 
Classes found: 
9:export class GameRenderer {
------------------------ 
 
FILE: C:\Users\Compiuter\Desktop\CRIPTO_SITO\space station\src\game\GameState.js 
Classes found: 
1:export class GameState {
------------------------ 
 
FILE: C:\Users\Compiuter\Desktop\CRIPTO_SITO\space station\src\game\GameUpgradeManager.js 
Classes found: 
1:export class GameUpgradeManager {
------------------------ 
 
FILE: C:\Users\Compiuter\Desktop\CRIPTO_SITO\space station\src\game\managers\EntityManager.js 
Classes found: 
3:export class EntityManager {
------------------------ 
 
FILE: C:\Users\Compiuter\Desktop\CRIPTO_SITO\space station\src\objects\BossEnemy.js 
Classes found: 
4:export class BossEnemy extends Enemy {
------------------------ 
 
FILE: C:\Users\Compiuter\Desktop\CRIPTO_SITO\space station\src\objects\Enemy.js 
Classes found: 
3:export class Enemy extends GameObject {
------------------------ 
 
FILE: C:\Users\Compiuter\Desktop\CRIPTO_SITO\space station\src\objects\EnemyProjectile.js 
Classes found: 
2:export class EnemyProjectile extends Projectile {
------------------------ 
 
FILE: C:\Users\Compiuter\Desktop\CRIPTO_SITO\space station\src\objects\Explosion.js 
Classes found: 
2:export class Explosion extends GameObject {
------------------------ 
 
FILE: C:\Users\Compiuter\Desktop\CRIPTO_SITO\space station\src\objects\FloatingText.js 
Classes found: 
1:export class FloatingText {
------------------------ 
 
FILE: C:\Users\Compiuter\Desktop\CRIPTO_SITO\space station\src\objects\GameObject.js 
Classes found: 
1:export class GameObject {
------------------------ 
 
FILE: C:\Users\Compiuter\Desktop\CRIPTO_SITO\space station\src\objects\PowerUp.js 
Classes found: 
2:export class PowerUp extends GameObject {
------------------------ 
 
FILE: C:\Users\Compiuter\Desktop\CRIPTO_SITO\space station\src\objects\Projectile.js 
Classes found: 
2:export class Projectile extends GameObject {
------------------------ 
 
FILE: C:\Users\Compiuter\Desktop\CRIPTO_SITO\space station\src\objects\ShooterEnemy.js 
Classes found: 
4:export class ShooterEnemy extends Enemy {
------------------------ 
 
FILE: C:\Users\Compiuter\Desktop\CRIPTO_SITO\space station\src\objects\SpaceStation.js 
Classes found: 
3:export class SpaceStation extends GameObject {
------------------------ 
 
FILE: C:\Users\Compiuter\Desktop\CRIPTO_SITO\space station\src\objects\SpeedyEnemy.js 
Classes found: 
2:export class SpeedyEnemy extends Enemy {
------------------------ 
 
FILE: C:\Users\Compiuter\Desktop\CRIPTO_SITO\space station\src\objects\Wave.js 
Classes found: 
1:export class Wave {
------------------------ 
 
FILE: C:\Users\Compiuter\Desktop\CRIPTO_SITO\space station\src\ui\components\ResourceBar.js 
Classes found: 
7:export class ResourceBar {
------------------------ 
 
FILE: C:\Users\Compiuter\Desktop\CRIPTO_SITO\space station\src\ui\components\UIComponent.js 
Classes found: 
1:export class UIComponent {
------------------------ 
 
FILE: C:\Users\Compiuter\Desktop\CRIPTO_SITO\space station\src\utils\AbilityButtons.js 
Classes found: 
1:export class AbilityButtons {
------------------------ 
 
FILE: C:\Users\Compiuter\Desktop\CRIPTO_SITO\space station\src\utils\ColorUtils.js 
Classes found: 
1:export class ColorUtils {
------------------------ 
 
FILE: C:\Users\Compiuter\Desktop\CRIPTO_SITO\space station\src\utils\GameStats.js 
Classes found: 
1:export class GameStats {
------------------------ 
 
FILE: C:\Users\Compiuter\Desktop\CRIPTO_SITO\space station\src\utils\RenderUtils.js 
Classes found: 
1:export class RenderUtils {
------------------------ 
 
FILE: C:\Users\Compiuter\Desktop\CRIPTO_SITO\space station\src\utils\ShapeUtils.js 
Classes found: 
1:export class ShapeUtils {
------------------------ 
 
FILE: C:\Users\Compiuter\Desktop\CRIPTO_SITO\space station\src\utils\StarBackground.js 
Classes found: 
1:export class StarBackground {
------------------------ 
 
FILE: C:\Users\Compiuter\Desktop\CRIPTO_SITO\space station\src\utils\TextUtils.js 
Classes found: 
1:export class TextUtils {
------------------------ 
 
FILE: C:\Users\Compiuter\Desktop\CRIPTO_SITO\space station\src\utils\Timer.js 
Classes found: 
1:export class Timer {
------------------------ 
 
FILE: C:\Users\Compiuter\Desktop\CRIPTO_SITO\space station\src\utils\UpgradeBars.js 
Classes found: 
4:export class UpgradeBars {
------------------------ 
 
FILE: C:\Users\Compiuter\Desktop\CRIPTO_SITO\space station\src\utils\WaveIndicator.js 
Classes found: 
1:export class WaveIndicator {
------------------------ 
 
Potential Issues: 
----------------- 
27:25:        } catch (error) {
39:92:        } catch (error) {
47:25:        } catch (error) {
59:92:        } catch (error) {
178:105:    handleSoundError(error) {
328:105:    handleSoundError(error) {
478:105:    handleSoundError(error) {
628:105:    handleSoundError(error) {
778:105:    handleSoundError(error) {
928:105:    handleSoundError(error) {
1078:105:    handleSoundError(error) {
1228:105:    handleSoundError(error) {
1378:105:    handleSoundError(error) {
1528:105:    handleSoundError(error) {
1678:105:    handleSoundError(error) {
1828:105:    handleSoundError(error) {
1978:105:    handleSoundError(error) {
2128:105:    handleSoundError(error) {
2702:37:            } catch (error) {
2720:37:            } catch (error) {
2738:37:            } catch (error) {
2756:37:            } catch (error) {
